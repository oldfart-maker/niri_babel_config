# -*- indent-tabs-mode: nil; coding: utf-8-unix; -*-
#+PROPERTY: header-args :noweb yes :eval yes :exports results :results value
#+TITLE: Niri Config.kdl

* Date/Timestamp of tangle execution
#+name: timestamp
#+begin_src python :results value
from datetime import datetime
return datetime.now().strftime("%Y-%m-%d %H:%M:%S")
#+end_src

#+RESULTS: timestamp
: 2025-07-26 06:40:34

* Block error checker.
#+NAME: lint_command
#+BEGIN_SRC python :var command=niri_scripts :results output
def lint_command(cmd):
    errors = []
    if '\n' in cmd:
        errors.append("❌ Command contains a newline — this will break Noweb substitution.")
    if not (cmd.startswith('"') and cmd.endswith('"')) and '"' in cmd:
        errors.append("❌ Command contains quotes but is not fully wrapped in double quotes.")
    if cmd.count('"') % 2 != 0:
        errors.append("❌ Mismatched number of double quotes.")
    if cmd.count("--") % 2 != 0:
        errors.append("⚠️ Odd number of --flags, might be missing a value.")
    if not errors:
        return "✅ Command passes lint checks."
    return "\n".join(errors)

print(lint_command(command))
#+END_SRC

#+RESULTS: lint_command
: ✅ Command passes lint checks.

* Colors
#+name: theme-colors-json
#+begin_src python :results value
import json

theme = {}
with open("/home/username/.cache/wal/colors.sh", "r") as f:
    for line in f:
        line = line.strip()
        if line.startswith("#") or "=" not in line:
            continue
        if line.startswith("export"):
            line = line.replace("export", "", 1).strip()
        key, val = map(str.strip, line.split("=", 1))
        val = val.strip("'\"")
        theme[key] = val

return json.dumps(theme)
#+end_src

#+RESULTS: theme-colors-json
: {"wallpaper": "/home/username/Pictures/wallpapers/burning-earth.png", "background": "#121110", "foreground": "#e3dcca", "cursor": "#e3dcca", "color0": "#121110", "color1": "#938B76", "color2": "#A0977F", "color3": "#A59B83", "color4": "#B5AA8D", "color5": "#C6B999", "color6": "#D5C7A3", "color7": "#e3dcca", "color8": "#9e9a8d", "color9": "#938B76", "color10": "#A0977F", "color11": "#A59B83", "color12": "#B5AA8D", "color13": "#C6B999", "color14": "#D5C7A3", "color15": "#e3dcca", "FZF_DEFAULT_OPTS": "", "LS_COLORS": "${LS_COLORS}:su=30;41:ow=30;42:st=30;44:"}

#+name: colors-dict
#+begin_src python :var colors_raw=theme-colors-json :results value
  # [colors.normal]
  # black   = "${color0}"
  # red     = "${color1}"
  # green   = "${color2}"
  # yellow  = "${color3}"
  # blue    = "${color4}"
  # magenta = "${color5}"
  # cyan    = "${color6}"
  # white   = "${color7}"
  	
  # [colors.bright]
  # black   = "${color8}"
  # red     = "${color9}"
  # green   = "${color10}"
  # yellow  = "${color11}"
  # blue    = "${color12}"
  # magenta = "${color13}"
  # cyan    = "${color14}"
  # white   = "${color15}"

  # background = background
  # foreground = foreground

  import json  
  colors = json.loads(colors_raw)
  return colors
#+end_src

#+RESULTS: colors-dict
: {'wallpaper': '/home/username/Pictures/wallpapers/burning-earth.png', 'background': '#121110', 'foreground': '#e3dcca', 'cursor': '#e3dcca', 'color0': '#121110', 'color1': '#938B76', 'color2': '#A0977F', 'color3': '#A59B83', 'color4': '#B5AA8D', 'color5': '#C6B999', 'color6': '#D5C7A3', 'color7': '#e3dcca', 'color8': '#9e9a8d', 'color9': '#938B76', 'color10': '#A0977F', 'color11': '#A59B83', 'color12': '#B5AA8D', 'color13': '#C6B999', 'color14': '#D5C7A3', 'color15': '#e3dcca', 'FZF_DEFAULT_OPTS': '', 'LS_COLORS': '${LS_COLORS}:su=30;41:ow=30;42:st=30;44:'}

#+name: background
#+begin_src python :var colors_raw=theme-colors-json :results value
import json
colors = json.loads(colors_raw)
return colors["background"]
#+end_src

#+RESULTS: background
: #121110

#+name: foreground
#+begin_src python :var colors_raw=theme-colors-json :results value
import json
colors = json.loads(colors_raw)
return colors["foreground"]
#+end_src

#+RESULTS: foreground
: #e3dcca

#+name: color0
#+begin_src python :var colors_raw=theme-colors-json :results value
import json
colors = json.loads(colors_raw)
return colors["color0"]
#+end_src

#+RESULTS: color0
: #121110

#+name: color1
#+begin_src python :var colors_raw=theme-colors-json :results value
import json
colors = json.loads(colors_raw)
return colors["color1"]
#+end_src

#+RESULTS: color1
: #938B76

#+name: color2
#+begin_src python :var colors_raw=theme-colors-json :results value
import json
colors = json.loads(colors_raw)
return colors["color2"]
#+end_src

#+RESULTS: color2
: #A0977F

#+name: color3
#+begin_src python :var colors_raw=theme-colors-json :results value
import json
colors = json.loads(colors_raw)
return colors["color3"]
#+end_src

#+RESULTS: color3
: #A59B83

#+name: color4
#+begin_src python :var colors_raw=theme-colors-json :results value
import json
colors = json.loads(colors_raw)
return colors["color4"]
#+end_src

#+RESULTS: color4
: #B5AA8D

#+name: color5
#+begin_src python :var colors_raw=theme-colors-json :results value
import json
colors = json.loads(colors_raw)
return colors["color5"]
#+end_src

#+RESULTS: color5
: #C6B999

#+name: color6
#+begin_src python :var colors_raw=theme-colors-json :results value
import json
colors = json.loads(colors_raw)
return colors["color6"]
#+end_src

#+RESULTS: color6
: #D5C7A3

#+name: color7
#+begin_src python :var colors_raw=theme-colors-json :results value
import json
colors = json.loads(colors_raw)
return colors["color7"]
#+end_src

#+RESULTS: color7
: #e3dcca

#+name: color8
#+begin_src python :var colors_raw=theme-colors-json :results value
import json
colors = json.loads(colors_raw)
return colors["color8"]
#+end_src

#+RESULTS: color8
: #9e9a8d

#+name: color9
#+begin_src python :var colors_raw=theme-colors-json :results value
import json
colors = json.loads(colors_raw)
return colors["color9"]
#+end_src

#+RESULTS: color9
: #938B76

#+name: color10
#+begin_src python :var colors_raw=theme-colors-json :results value
import json
colors = json.loads(colors_raw)
return colors["color10"]
#+end_src

#+RESULTS: color10
: #A0977F

#+name: color11
#+begin_src python :var colors_raw=theme-colors-json :results value
import json
colors = json.loads(colors_raw)
return colors["color11"]
#+end_src

#+RESULTS: color11
: #A59B83

#+name: color12
#+begin_src python :var colors_raw=theme-colors-json :results value
import json
colors = json.loads(colors_raw)
return colors["color12"]
#+end_src

#+RESULTS: color12
: #B5AA8D

#+name: color13
#+begin_src python :var colors_raw=theme-colors-json :results value
import json
colors = json.loads(colors_raw)
return colors["color13"]
#+end_src

#+RESULTS: color13
: #C6B999

#+name: color14
#+begin_src python :var colors_raw=theme-colors-json :results value
import json
colors = json.loads(colors_raw)
return colors["color14"]
#+end_src

#+RESULTS: color14
: #D5C7A3

#+name: color15
#+begin_src python :var colors_raw=theme-colors-json :results value
import json
colors = json.loads(colors_raw)
return colors["color15"]
#+end_src

#+RESULTS: color15
: #e3dcca

* Variables - Paths
#+NAME: niri_scripts
#+BEGIN_SRC python :results value
  return "~/.config/niri/scripts"
#+END_SRC

#+RESULTS: niri_scripts
: ~/.config/niri/scripts

#+NAME: screenshot_path
#+BEGIN_SRC python :results value
  return "~/Pictures/screenshots"
#+END_SRC

#+RESULTS: screenshot_path
: ~/Pictures/screenshots

* Variables - Apps & Scripts
#+NAME: bindings
#+BEGIN_SRC python :var _temp=niri_scripts :results value
  _temp = f'{_temp}/rofi_bindings'
  return f'"\\"{_temp}\\""'  
#+END_SRC

#+RESULTS: bindings
: "~/.config/niri/scripts/rofi_bindings"

#+NAME: launcher
#+BEGIN_SRC python :var _temp=niri_scripts :results value
  _temp = f"{_temp}/rofi_launcher"
  return f'"\\"{_temp}\\""'    
#+END_SRC

#+RESULTS: launcher
: "~/.config/niri/scripts/rofi_launcher"

#+NAME: bluetooth
#+BEGIN_SRC python :var _temp=niri_scripts :results value
  _temp = f"{_temp}/rofi_bluetooth"
  return f'"\\"{_temp}\\""'    
#+END_SRC

#+RESULTS: bluetooth
: "~/.config/niri/scripts/rofi_bluetooth"

#+NAME: power_menu
#+BEGIN_SRC python :var _temp=niri_scripts :results value
  _temp = f"{_temp}/rofi_powermenu"
  return f'"\\"{_temp}\\""'    
#+END_SRC

#+RESULTS: power_menu
: "~/.config/niri/scripts/rofi_powermenu"

#+NAME: music
#+BEGIN_SRC python :var _temp=niri_scripts :results value
  _temp = f"{_temp}/rofi_music"
  return f'"\\"{_temp}\\""'    
#+END_SRC

#+RESULTS: music
: "~/.config/niri/scripts/rofi_music"

#+NAME: network
#+BEGIN_SRC python :var _temp=niri_scripts :results value
  _temp = f"{_temp}/rofi_network"
  return f'"\\"{_temp}\\""'    
#+END_SRC

#+RESULTS: network
: "~/.config/niri/scripts/rofi_network"

#+NAME: show_windows
#+BEGIN_SRC python :var _temp=niri_scripts :results value
  _temp = f"{_temp}/rofi_showwindows"
  return f'"\\"{_temp}\\""'    
#+END_SRC

#+RESULTS: show_windows
: "~/.config/niri/scripts/rofi_showwindows"

#+NAME: term
#+BEGIN_SRC python :var _temp=niri_scripts :results value
  _temp = f"{_temp}/alacritty"
  return f'"\\"{_temp}\\""'    
#+END_SRC

#+RESULTS: term
: "~/.config/niri/scripts/alacritty"

#+NAME: lock_screen
#+BEGIN_SRC python :var _temp=niri_scripts :results value
  _temp = f"{_temp}/lockscreen"
  return f'"\\"{_temp}\\""'    
#+END_SRC

#+RESULTS: lock_screen
: "~/.config/niri/scripts/lockscreen"

#+NAME: scratchpad_put
#+BEGIN_SRC python :var _temp=niri_scripts :results value
  _temp = f"{_temp}/send_to_scratchpad"
  return f'"\\"{_temp}\\""'    
#+END_SRC

#+RESULTS: scratchpad_put
: "~/.config/niri/scripts/send_to_scratchpad"

#+NAME: scratchpad_get
#+BEGIN_SRC python :var _temp=niri_scripts :results value
  _temp = f"{_temp}/niri_scratchpad"
  return f'"\\"{_temp}\\""'    
#+END_SRC

#+RESULTS: scratchpad_get
: "~/.config/niri/scripts/niri_scratchpad"

#+NAME: editor
#+BEGIN_SRC python :results value :var script=niri_scripts
  inner = f"{script}/emacs-profile 'emacs-alt'"
  cmd = [ '"sh"', '"-c"', f'"{inner}"' ]
  return " ".join(cmd)
#+END_SRC

#+RESULTS: editor
: "sh" "-c" "~/.config/niri/scripts/emacs-profile 'emacs-alt'"

#+NAME: file_gui
#+BEGIN_SRC python
  return f'"\\"thunar\\""'
#+END_SRC

#+RESULTS: file_gui
: "thunar"


#+NAME: file_term
#+BEGIN_SRC python :results value
cmd = [
    '"sh"',
    '"-c"', '"kitty --detach yazi"'
]
return " ".join(cmd)
#+END_SRC

#+RESULTS: file_term
: "sh" "-c" "kitty --detach yazi"

#+NAME: browser
#+BEGIN_SRC python
  return f'"\\"vivaldi-snapshot\\""'
#+END_SRC

#+RESULTS: browser
: "vivaldi-snapshot"

#+NAME: notes
#+BEGIN_SRC python
  return f'"\\"pluma\\""'  
#+END_SRC

#+RESULTS: notes
: "pluma"

#+NAME: sms_get
#+BEGIN_SRC python :results value
cmd = [
    '"~/projects/niri_toolkit/niri-move-window.py"',
    '"--match"', '"Messages"',
    '"--target"', '"m"',
    '"--target_id"', '"HDMI-A-2"',
    '"--focus"'
]
return " ".join(cmd)
#+END_SRC

#+RESULTS: sms_get
: "~/projects/niri_toolkit/niri-move-window.py" "--match" "Messages" "--target" "m" "--target_id" "HDMI-A-2" "--focus"

#+NAME: sms_put
#+BEGIN_SRC python :results value
cmd = [
    '"~/projects/niri_toolkit/niri-move-window.py"',
    '"--match"', '"Messages"',
    '"--target"', '"w"',
    '"--target_id"', '"messaging"'
]
return " ".join(cmd)
#+END_SRC

#+RESULTS: sms_put
: "~/projects/niri_toolkit/niri-move-window.py" "--match" "Messages" "--target" "w" "--target_id" "messaging"

#+NAME: audio_raise_volume
#+BEGIN_SRC python :results value
  cmd = [
      '"wpctl"',
      '"set-volume"',
      '"@DEFAULT_AUDIO_SINK@"',
      '"0.1+"'
  ]
  return " ".join(cmd)
#+END_SRC

#+RESULTS: audio_raise_volume
: "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1+"

#+NAME: audio_lower_volume
#+BEGIN_SRC python :results value
  cmd = [
      '"wpctl"',
      '"set-volume"',
      '"@DEFAULT_AUDIO_SINK@"',
      '"0.1-"'
  ]
  return " ".join(cmd)
#+END_SRC

#+RESULTS: audio_lower_volume
: "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1-"

#+NAME: audio_mute
#+BEGIN_SRC python :results value
  cmd = [
      '"wpctl"',
      '"set-mute"',
      '"@DEFAULT_AUDIO_SINK@"',
      '"toggle"'
  ]
  return " ".join(cmd)
#+END_SRC

#+RESULTS: audio_mute
: "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"

#+NAME: audio_mic_mute
#+BEGIN_SRC python :results value
  cmd = [
      '"wpctl"',
      '"set-mute"',
      '"@DEFAULT_AUDIO_SOURCE@"',
      '"toggle"'
  ]
  return " ".join(cmd)
#+END_SRC

#+RESULTS: audio_mic_mute
: "wpctl" "set-mute" "@DEFAULT_AUDIO_SOURCE@" "toggle"


#+NAME: idle_lock
#+BEGIN_SRC python :results value
  cmd = [
      '"sh"',
      '"-c"',
      '"swayidle -w timeout 600 <<niri_scripts()>>/lockscreen"'
  ]
  return " ".join(cmd)
#+END_SRC

#+RESULTS: idle_lock
: "sh" "-c" "swayidle -w timeout 600 ~/.config/niri/scripts/lockscreen"

#+NAME: setup_theme
#+BEGIN_SRC python :var _temp=niri_scripts :results value
  _temp = f"{_temp}/setup_theme"
  return f'"\\"{_temp}\\""'    
#+END_SRC

#+RESULTS: setup_theme
: "~/.config/niri/scripts/setup_theme"

#+NAME: wallpaper
#+BEGIN_SRC python :var _temp=niri_scripts :results value
  _temp = f"{_temp}/wallpaper"
  return f'"\\"{_temp}\\""'    
#+END_SRC

#+RESULTS: wallpaper
: "~/.config/niri/scripts/wallpaper"

#+NAME: notifications
#+BEGIN_SRC python :var _temp=niri_scripts :results value
  _temp = f"{_temp}/notifications"
  return f'"\\"{_temp}\\""'    
#+END_SRC

#+RESULTS: notifications
: "~/.config/niri/scripts/notifications"

#+NAME: status_bar
#+BEGIN_SRC python :var _temp=niri_scripts :results value
  _temp = f"{_temp}/statusbar"
  return f'"\\"{_temp}\\""'    
#+END_SRC

#+RESULTS: status_bar
: "~/.config/niri/scripts/statusbar"

#+NAME: spotify
#+BEGIN_SRC python
  return f'"\\"spotify\\""'      
#+END_SRC

#+RESULTS: spotify
: "spotify"

#+NAME: element
#+BEGIN_SRC python
  return f'"\\"element-desktop\\""'  
#+END_SRC

#+RESULTS: element
: "element-desktop"

#+NAME: sms
#+BEGIN_SRC python
  return f'"\\"googlemessages\\""'  
#+END_SRC

#+RESULTS: sms
: "googlemessages"

#+NAME: calendar
#+BEGIN_SRC python
  return f'"\\"google-calendar-nativefier-dark\\""'  
#+END_SRC

#+RESULTS: calendar
: "google-calendar-nativefier-dark"

#+NAME: discord
#+BEGIN_SRC python
  return f'"\\"vesktop\\""'  
#+END_SRC

#+RESULTS: discord
: "vesktop"

#+NAME: email
#+BEGIN_SRC python
  return f'"\\"geary\\""'  
#+END_SRC

#+RESULTS: email
: "geary"

#+NAME: xwayland
#+BEGIN_SRC python
  return f'"\\"xwayland-satellite\\""'  
#+END_SRC

#+RESULTS: xwayland
: "xwayland-satellite"

* Docs
#+BEGIN_SRC kdl :tangle ./config.kdl :noweb yes :results value
  // LAST BUILD / DEPLOY: <<timestamp()>>
  // ## NOTES  ###########################################################  
  // This config file has been created by emacs org babel. This was done
  // mostly as a learning experiment and to address the gaps that .kdl
  // files have such as use of variables or access to env. variables etc.
  //
  // To generate this file without automation do the following (these are
  // notes to myself as I will forget this since once the changes
  // become stable I doubt I will remember any of this:
  // 1) Open ~/.config/org/babel/niri_config/niri_config.org
  // 2) M-x org-babel-execute-buffer (This will evaluate all of the code
  // blocks that have been marked for evaluation and display the results
  // just below the code block. To evaluate any code block place the
  // cursor inside the code block and C-c C-c.
  // 3) While inside of the niri_config.org file M-x org-babel-tangle
  // This will produce the config.kdl file in the niri_config dir.
  // 4) Copy config.kdl to the niri directory.
  // 5) To run steps 1-4 fully automated M-x niri-build-and-deploy. The
  // live config.kdl will be copied to config.999, where 999 is a
  // sequencial number and also keep the last 5 copies for rollback.
  //
  // I am using the archcraft distro which uses pywal. Anytime a new theme
  // is generated it generates a new colors.sh file that is applied all
  // the basic shell apps. The niri_config.org babel imports this file
  // and applies the colors to the niri config where applicable. This is
  // experimental as there are not really many places to apply colors to
  // a wtm in general (e.g. border, background).
  //
  // TODO
  // 1) Automate the steps 1-4 and try to capture a niri validate error.
  // If an error occurs role back to the previous niri config.kdl, unless
  // there is a way to launch niri with a different config file
  //
  // 2) Work on color application.
  //
  // 3) Refine / Refactor the babel file and experiement with different
  // languages. I've done both lisp and python. python is easier to
  // understand but does not work quite as well as lisp.
#+END_SRC

* Environment
#+BEGIN_SRC kdl :tangle ./config.kdl
// ## ENVIRONMENT  ###########################################################  
  environment {
          DISPLAY ":1"
  }
#+END_SRC
* Startup Apps
#+BEGIN_SRC kdl :noweb yes :eval yes :exports results :tangle ./config.kdl
  // ## STARTUP APPS  ###########################################################  
    spawn-at-startup      <<idle_lock()>>
    spawn-at-startup      <<setup_theme()>>
    spawn-at-startup      <<wallpaper()>>
    spawn-at-startup      <<notifications()>>
    spawn-at-startup      <<status_bar()>>
    spawn-at-startup      <<spotify()>>
    spawn-at-startup      <<element()>>
    spawn-at-startup      <<sms()>>
    spawn-at-startup      <<calendar()>>
    spawn-at-startup      <<discord()>>
    spawn-at-startup      <<email()>>
    spawn-at-startup      <<xwayland()>>
#+END_SRC
* Workspaces
#+BEGIN_SRC kdl :tangle ./config.kdl
// ## SETUP WORKSPACES ##################################################  
  workspace "scratchpad" {
          open-on-output "HDMI-A-3"
  }

  workspace "spotify" {
          open-on-output "HDMI-A-3"
  }

  workspace "discord" {
          open-on-output "HDMI-A-3"
  }

  workspace "cameras" {
          open-on-output "HDMI-A-3"
  }

  workspace "virtbox" {
          open-on-output "HDMI-A-3"
  }

  workspace "element" {
          open-on-output "HDMI-A-3"
  }

  workspace "messaging" {
          open-on-output "HDMI-A-3"
  }
#+END_SRC

* Misc.
#+BEGIN_SRC kdl :tangle ./config.kdl
// ## MISCELLANEOUS ##########################################################  
  hotkey-overlay {
          skip-at-startup
  }
#+END_SRC

* Inputs
#+BEGIN_SRC kdl :tangle ./config.kdl
// ## INPUT CONFIGURATION ####################################################  
  input {
          keyboard {
                  xkb {
                     // layout "us,ru"
                     // options "grp:win_space_toggle,compose:ralt,ctrl:nocaps"
                  }
                  numlock
          }

          touchpad {
                  // off
                  tap
                  // dwt
                  // dwtp
                  // drag false
                  // drag-lock
                  natural-scroll
                  // accel-speed 0.2
                  // accel-profile "flat"
                  // scroll-method "two-finger"
                  // disabled-on-external-mouse
          }

          mouse {
                  // off
                  natural-scroll
                  accel-speed -0.5
                  accel-profile "flat"
                  scroll-method "no-scroll"
          }

          trackpoint {
                  // off
                  // natural-scroll
                  // accel-speed 0.2
                  // accel-profile "flat"
                  // scroll-method "on-button-down"
                  // scroll-button 273
                  // middle-emulation
          }

          warp-mouse-to-focus

          focus-follows-mouse max-scroll-amount="50%"
  }
#+END_SRC

* Outputs
#+BEGIN_SRC kdl :tangle ./config.kdl :noweb yes
// ## OUTPUT CONFIGURATION ####################################################  
  output "HDMI-A-1" {

          // off

          mode "1920x1080@60"

          scale 1

          transform "normal"

          position x=0 y=0

  }

  output "HDMI-A-2" {

          // off

          mode "1920x1080@60"

          scale 1

          transform "normal"

          position x=1920 y=0
  }

  output "HDMI-A-3" {

          // off

          mode "1920x1080@60"

          scale 1
          transform "normal"

          position x=3840 y=0
  }  
#+END_SRC

* Layout
#+BEGIN_SRC kdl :tangle ./config.kdl :noweb yes :eval no :results value  
  // ## LAYOUT CONFIGURATION ####################################################  
    layout {
            gaps 4

            center-focused-column "never"
          
            always-center-single-column

            preset-column-widths {
                    proportion 0.33333
                    proportion 0.5
                    proportion 0.66667
                    proportion 0.9
                    proportion 1.0
            }

            // preset-window-heights { }

            // default-column-width { proportion 0.5; }

            default-column-width {}

            // draw-border-with-background

            background-color "transparent"

            focus-ring {
                    // off
                    width 2
                    active-color "<<foreground()>>"
                    inactive-color "<<background()>>"
                    // active-gradient from="#80c8ff" to="#bbddff" angle=45
                    // inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
            }


            border {
                    off
                    width 1
                    active-color "#ffc87f"
                    inactive-color "#505050"
                    urgent-color "#9b0000"
                    active-gradient from="#ffbb66" to="#ffc880" angle=45 relative-to="workspace-view"
                    inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
            }
            
            shadow {
                    // on
                    draw-behind-window false
                    softness 30
                    spread 5
                    offset x=0 y=5
                    color "#00000080"
                    inactive-color "#00000060"
            }

            struts {
                    left 0
                    right 0
                    top 0
                    bottom 0
            }

            tab-indicator {
                    // off
                    hide-when-single-tab
                    place-within-column
                    gap 5
                    width 15
                    length total-proportion=1.0
                    position "top"
                    gaps-between-tabs 5
                    corner-radius 8
                    active-color "bf616a"
                    inactive-color "gray"
                    // active-gradient from="#80c8ff" to="#bbddff" angle=45
                    // inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
            }

            insert-hint {
                    // off
                    color "#ffc87f80"
                    gradient from="#ffbb6680" to="#ffc88080" angle=45 relative-to="workspace-view"
            }
    }
    // ## COMPOSITOR / OTHER CONFIGURATION ########################################
    prefer-no-csd

    screenshot-path "<<screenshot_path()>>/Screenshot from %Y-%m-%d %H-%M-%S.png"

    // ## ANIMATIONS ##############################################################
    animations {
        // off

     workspace-switch {
                    spring damping-ratio=2.0 stiffness=1000 epsilon=0.0001
            }

            window-open {
                    duration-ms 250
                    curve "ease-out-cubic"
            }

            window-close {
                    duration-ms 250
                    curve "ease-out-quad"
            }

            horizontal-view-movement {
                    spring damping-ratio=2.0 stiffness=500 epsilon=0.0001
            }

            window-movement {
                    spring damping-ratio=2.0 stiffness=500 epsilon=0.0001
            }

            window-resize {
                    spring damping-ratio=2.0 stiffness=500 epsilon=0.0001
            }

            config-notification-open-close {
                    spring damping-ratio=0.6 stiffness=500 epsilon=0.001
            }

            screenshot-ui-open {
                    duration-ms 200
                    curve "ease-out-quad"
            }

            overview-open-close {
                    spring damping-ratio=2.0 stiffness=500 epsilon=0.0001
            }

    }

    cursor {
            xcursor-theme "Qogirr"
            xcursor-size 12
            hide-when-typing
            //hide-after-inactive-ms 1000
    }

    // ## OVERVIEW SETTINGS ############################################################
    overview {
    	// backdrop-color "#566870"
            zoom 0.625
            workspace-shadow {
    	 	off
    	}
    }
#+END_SRC

* Window Rules 
#+BEGIN_SRC kdl :tangle ./config.kdl
// ## WINDOW / LAYER RULES #####################################################  
  window-rule {
          default-column-width {}
          geometry-corner-radius 10
          clip-to-geometry true
          draw-border-with-background false
          opacity 0.60
  }

  window-rule {
          match is-active=true
          opacity 1.0
  }

  //	# App behaviour
  window-rule {
          match app-id="pluma"
          open-floating true
  }

  window-rule {
          match app-id="Sxiv"
          open-floating true
          open-fullscreen true
  }

  window-rule {
          match app-id="emacs"
          open-floating false
          open-maximized true
  }

  window-rule {
          match app-id="org.pwmt.zathura"
          open-floating true
          default-column-width { fixed 900; }
          default-window-height { fixed 900; }
  }

  window-rule {
          match app-id="qalculate-gtk"
          open-floating true
          default-column-width { fixed 400; }
          default-window-height { fixed 400; }
  }

  window-rule {
          match app-id="Alacritty"
          open-floating true
          default-column-width { fixed 900; }
          default-window-height { fixed 900; }
  }

  window-rule {
          match app-id="Spotify"
          match app-id="spotify"
          open-on-workspace "spotify"
          open-maximized true
  }

  window-rule {
          match app-id="vesktop"
          open-on-workspace "discord"
          open-maximized true
  }

  window-rule {
          match app-id="org.cctv-viewer.cctv-viewer"
          open-on-workspace "cameras"
          open-maximized true
          opacity 1.0
  }

  window-rule {
          match app-id="VirtualBox Manager"
          open-on-workspace "virtbox"
          open-maximized true
  }

  window-rule {
          match app-id="Element"
          open-on-workspace "element"
          open-maximized true
  }

  window-rule {
          match app-id="GoogleMessages"
          open-on-workspace "messaging"
          open-maximized true
  }

  window-rule {
          match app-id="org.kde.kdeconnect.sms"
          open-on-workspace "messaging"
          open-maximized true
  }

  window-rule {
          match app-id="org.gnome.Geary"
          open-on-workspace "messaging"
          open-maximized true
  }

  window-rule {
          match app-id="googlecalendardark-nativefier-e22938"
          open-on-workspace "messaging"
          open-maximized true
  }

  layer-rule {
          place-within-backdrop true
  }
#+END_SRC

* Bindings
#+BEGIN_SRC kdl :tangle ./config.kdl :noweb yes :eval no :results value
    // ## BINDINGS ###############################################################
  binds {
      Mod+Shift+Slash                               { spawn <<bindings()>>; }
      Mod+D                                         { spawn <<launcher()>>; }
      Mod+B                                         { spawn <<bluetooth()>>; }
      Mod+X                                         { spawn <<power_menu()>>; }
      Mod+M                                         { spawn <<music()>>; }
      Mod+N                                         { spawn <<network()>>; }
      Mod+Shift+D                                   { spawn <<show_windows()>>; }
      Mod+E                                         { spawn <<editor()>>; }
      Mod+T                                         { spawn <<file_gui()>>; }
      Mod+Shift+Y                                   { spawn <<file_term()>>; }
      Mod+Shift+W                                   { spawn <<browser()>>; }
      Mod+Shift+N                                   { spawn <<notes()>>; }
      Mod+1                                         { spawn <<sms_get()>>; }
      Mod+Shift+1                                   { spawn <<sms_put()>>; }
      Mod+Return                                    { spawn <<term()>>; }
      Mod+Alt+L                                     { spawn <<lock_screen()>>; }
      Mod+P                                         { spawn <<scratchpad_put()>>; }
      Mod+Shift+P                                   { spawn <<scratchpad_get()>>; }  
      XF86AudioRaiseVolume allow-when-locked=true   { spawn <<audio_raise_volume()>>; }
      XF86AudioLowerVolume allow-when-locked=true   { spawn <<audio_lower_volume()>>; }
      XF86AudioMute allow-when-locked=true          { spawn <<audio_mute()>>; }
      XF86AudioMicMute allow-when-locked=true       { spawn <<audio_mic_mute()>>; }
      Mod+O repeat=false                            { toggle-overview; }
      Mod+Q                                         { close-window; }
      Mod+S                                         { screenshot; }
      Mod+h                                         { focus-column-left; }
      Mod+j                                         { focus-window-down; }
      Mod+k                                         { focus-window-up; }
      Mod+l                                         { focus-column-right; }
      Mod+Shift+h                                   { move-column-left; }
      Mod+Shift+j                                   { move-window-down; }
      Mod+Shift+k                                   { move-window-up; }
      Mod+Shift+l                                   { move-column-right; }
      Mod+Home                                      { focus-column-first; }
      Mod+End                                       { focus-column-last; }
      Mod+Ctrl+Home                                 { move-column-to-first; }
      Mod+Ctrl+End                                  { move-column-to-last; }
      Mod+Ctrl+h                                    { focus-monitor-left; }
      Mod+Ctrl+j                                    { focus-monitor-down; }
      Mod+Ctrl+k                                    { focus-monitor-up; }
      Mod+Ctrl+l                                    { focus-monitor-right; }
      Mod+Shift+Ctrl+h                              { move-column-to-monitor-left; }
      Mod+Shift+Ctrl+j                              { move-column-to-monitor-down; }
      Mod+Shift+Ctrl+k                              { move-column-to-monitor-up; }
      Mod+Shift+Ctrl+l                              { move-column-to-monitor-right; }
      Mod+Page_Down                                 { focus-workspace-down; }
      Mod+Page_Up                                   { focus-workspace-up; }
      Mod+U                                         { focus-workspace-down; }
      Mod+I                                         { focus-workspace-up; }
      Mod+Ctrl+Page_Down                            { move-column-to-workspace-down; }
      Mod+Ctrl+Page_Up                              { move-column-to-workspace-up; }
      Mod+Ctrl+U                                    { move-column-to-workspace-down; }
      Mod+Ctrl+I                                    { move-column-to-workspace-up; }
      Mod+Shift+Page_Down                           { move-workspace-down; }
      Mod+Shift+Page_Up                             { move-workspace-up; }
      Mod+Shift+U                                   { move-workspace-down; }
      Mod+Shift+I                                   { move-workspace-up; }
      Mod+WheelScrollDown           cooldown-ms=150 { focus-workspace-down; }
      Mod+WheelScrollUp             cooldown-ms=150 { focus-workspace-up; }
      Mod+Ctrl+WheelScrollDown      cooldown-ms=150 { move-column-to-workspace-down; }
      Mod+Ctrl+WheelScrollUp        cooldown-ms=150 { move-column-to-workspace-up; }
      Mod+Shift+WheelScrollDown                     { focus-column-right; }
      Mod+Shift+WheelScrollUp                       { focus-column-left; }
      Mod+Ctrl+Shift+WheelScrollDown                { move-column-right; }
      Mod+Ctrl+Shift+WheelScrollUp                  { move-column-left; }
      Mod+Tab                                       { focus-workspace-previous; }
      Mod+BracketLeft                               { consume-or-expel-window-left; }
      Mod+BracketRight                              { consume-or-expel-window-right; }
      Mod+Comma                                     { consume-window-into-column; }
      Mod+Period                                    { expel-window-from-column; }
      Mod+R                                         { switch-preset-column-width; }
      Mod+Shift+R                                   { switch-preset-window-height; }
      Mod+Ctrl+R                                    { reset-window-height; }
      Mod+F                                         { maximize-column; }
      Mod+Shift+F                                   { fullscreen-window; }
      Mod+Ctrl+F                                    { expand-column-to-available-width; }
      Mod+C                                         { center-column; }
      Mod+Ctrl+C                                    { center-visible-columns; }
      Mod+Minus                                     { set-column-width "-10%"; }
      Mod+Equal                                     { set-column-width "+10%"; }
      Mod+Ctrl+Minus                                { set-column-width "-1"; }
      Mod+Ctrl+Equal                                { set-column-width "+1"; }
      Mod+Shift+Minus                               { set-window-height "-10%"; }
      Mod+Shift+Equal                               { set-window-height "+10%"; }
      Mod+Shift+Ctrl+Minus                          { set-window-height "-1"; }
      Mod+Shift+Ctrl+Equal                          { set-window-height "+1"; }
      Mod+0                                         { set-column-width "960"; }
      Mod+Shift+0                                   { set-window-height "540"; }
      Mod+Alt+0                                     { set-column-width "1280"; }
      Mod+Shift+Alt+0                               { set-window-height "720"; }
      Mod+Ctrl+0                                    { set-column-width "1920"; }
      Mod+Shift+Ctrl+0                              { set-window-height "1080"; }
      Mod+V                                         { toggle-window-floating; }
      Mod+Shift+V                                   { switch-focus-between-floating-and-tiling; }
      Mod+W                                         { toggle-column-tabbed-display; }
      Mod+Space                                     { switch-layout "next"; }
      Mod+Shift+Space                               { switch-layout "prev"; }
      Print                                         { screenshot; }
      Ctrl+Print                                    { screenshot-screen; }
      Alt+Print                                     { screenshot-window; }
      Mod+Escape allow-inhibiting=false             { toggle-keyboard-shortcuts-inhibit; }
      Ctrl+Alt+Delete                               { quit; }
  }
#+END_SRC
