# -*- indent-tabs-mode: nil; coding: utf-8-unix; -*-
#+PROPERTY: header-args :noweb yes :eval yes :exports results :results value
#+TITLE: Niri Config.kdl

* Overview
#+BEGIN_SRC kdl :tangle ./config.kdl :noweb yes :results value
  // LAST BUILD / DEPLOY: <<timestamp()>>
  // ## NOTES  ###########################################################  
  // This config file has been created by emacs org babel. This was done
  // mostly as a learning experiment and to address the gaps that .kdl
  // files have such as use of variables or access to env. variables etc.
  //
  // To generate this file without automation do the following (these are
  // notes to myself as I will forget this since once the changes
  // become stable I doubt I will remember any of this:
  // 1) Open ~/.config/org/babel/niri_config/niri_config.org
  // 2) M-x org-babel-execute-buffer (This will evaluate all of the code
  // blocks that have been marked for evaluation and display the results
  // just below the code block. To evaluate any code block place the
  // cursor inside the code block and C-c C-c.
  // 3) While inside of the niri_config.org file M-x org-babel-tangle
  // This will produce the config.kdl file in the niri_config dir.
  // 4) Copy config.kdl to the niri directory.
  // 5) To run steps 1-4 fully automated M-x niri-build-and-deploy. The
  // live config.kdl will be copied to config.999, where 999 is a
  // sequencial number and also keep the last 5 copies for rollback.
  //
  // I am using the archcraft distro which uses pywal. Anytime a new theme
  // is generated it generates a new colors.sh file that is applied all
  // the basic shell apps. The niri_config.org babel imports this file
  // and applies the colors to the niri config where applicable. This is
  // experimental as there are not really many places to apply colors to
  // a wtm in general (e.g. border, background).
#+END_SRC

* Date/Timestamp of Last Update/Deployment
#+name: timestamp
#+begin_src python :results value
from datetime import datetime
return datetime.now().strftime("%Y-%m-%d %H:%M:%S")
#+end_src

#+RESULTS: timestamp
: 2025-08-09 19:19:56

* Target System
I have multiple systems (e.g. laptop, desktop, pi) that need different configurations mostly as
it relates to monitor, workspace and some limited customization if keybindings. Change the
return value to be either "lenovo", "dell", or "pi" based on the target system.
#+name: target-system
#+begin_src python :results value
  return "lenovo"
#+end_src

#+RESULTS: target-system
: lenovo

* Variables - Colors
I currently use archraft as my base distro which included pywal for themeing. This section
integrates the archcraft themeing approach by loading the colors.css file and applying
them in a few areas like focued / unfocused window ring / border.
#+name: theme-colors-json
#+begin_src python :results value
import json

theme = {}
with open("/home/username/.cache/wal/colors.sh", "r") as f:
    for line in f:
        line = line.strip()
        if line.startswith("#") or "=" not in line:
            continue
        if line.startswith("export"):
            line = line.replace("export", "", 1).strip()
        key, val = map(str.strip, line.split("=", 1))
        val = val.strip("'\"")
        theme[key] = val

return json.dumps(theme)
#+end_src

#+RESULTS: theme-colors-json
: {"wallpaper": "/home/username/Pictures/wallpapers/rubiks-cube.png", "background": "#1e1c1c", "foreground": "#dfd7c6", "cursor": "#dfd7c6", "color0": "#1e1c1c", "color1": "#948B77", "color2": "#A1967E", "color3": "#9D9882", "color4": "#A79C83", "color5": "#B5A98D", "color6": "#C8B999", "color7": "#dfd7c6", "color8": "#9c968a", "color9": "#948B77", "color10": "#A1967E", "color11": "#9D9882", "color12": "#A79C83", "color13": "#B5A98D", "color14": "#C8B999", "color15": "#dfd7c6", "FZF_DEFAULT_OPTS": "", "LS_COLORS": "${LS_COLORS}:su=30;41:ow=30;42:st=30;44:"}

#+name: colors-dict
#+begin_src python :var colors_raw=theme-colors-json :results value
  # [colors.normal]
  # black   = "${color0}"
  # red     = "${color1}"
  # green   = "${color2}"
  # yellow  = "${color3}"
  # blue    = "${color4}"
  # magenta = "${color5}"
  # cyan    = "${color6}"
  # white   = "${color7}"
  	
  # [colors.bright]
  # black   = "${color8}"
  # red     = "${color9}"
  # green   = "${color10}"
  # yellow  = "${color11}"
  # blue    = "${color12}"
  # magenta = "${color13}"
  # cyan    = "${color14}"
  # white   = "${color15}"

  # background = background
  # foreground = foreground

  import json  
  colors = json.loads(colors_raw)
  return colors
#+end_src

#+RESULTS: colors-dict
: {'wallpaper': '/home/username/Pictures/wallpapers/rubiks-cube.png', 'background': '#1e1c1c', 'foreground': '#dfd7c6', 'cursor': '#dfd7c6', 'color0': '#1e1c1c', 'color1': '#948B77', 'color2': '#A1967E', 'color3': '#9D9882', 'color4': '#A79C83', 'color5': '#B5A98D', 'color6': '#C8B999', 'color7': '#dfd7c6', 'color8': '#9c968a', 'color9': '#948B77', 'color10': '#A1967E', 'color11': '#9D9882', 'color12': '#A79C83', 'color13': '#B5A98D', 'color14': '#C8B999', 'color15': '#dfd7c6', 'FZF_DEFAULT_OPTS': '', 'LS_COLORS': '${LS_COLORS}:su=30;41:ow=30;42:st=30;44:'}

#+name: background
#+begin_src python :var colors_raw=theme-colors-json :results value
import json
colors = json.loads(colors_raw)
return colors["background"]
#+end_src

#+RESULTS: background
: #1e1c1c

#+name: foreground
#+begin_src python :var colors_raw=theme-colors-json :results value
import json
colors = json.loads(colors_raw)
return colors["foreground"]
#+end_src

#+RESULTS: foreground
: #dfd7c6

#+name: color0
#+begin_src python :var colors_raw=theme-colors-json :results value
import json
colors = json.loads(colors_raw)
return colors["color0"]
#+end_src

#+RESULTS: color0
: #1e1c1c

#+name: color1
#+begin_src python :var colors_raw=theme-colors-json :results value
import json
colors = json.loads(colors_raw)
return colors["color1"]
#+end_src

#+RESULTS: color1
: #948B77

#+name: color2
#+begin_src python :var colors_raw=theme-colors-json :results value
import json
colors = json.loads(colors_raw)
return colors["color2"]
#+end_src

#+RESULTS: color2
: #A1967E

#+name: color3
#+begin_src python :var colors_raw=theme-colors-json :results value
import json
colors = json.loads(colors_raw)
return colors["color3"]
#+end_src

#+RESULTS: color3
: #9D9882

#+name: color4
#+begin_src python :var colors_raw=theme-colors-json :results value
import json
colors = json.loads(colors_raw)
return colors["color4"]
#+end_src

#+RESULTS: color4
: #A79C83

#+name: color5
#+begin_src python :var colors_raw=theme-colors-json :results value
import json
colors = json.loads(colors_raw)
return colors["color5"]
#+end_src

#+RESULTS: color5
: #B5A98D

#+name: color6
#+begin_src python :var colors_raw=theme-colors-json :results value
import json
colors = json.loads(colors_raw)
return colors["color6"]
#+end_src

#+RESULTS: color6
: #C8B999

#+name: color7
#+begin_src python :var colors_raw=theme-colors-json :results value
import json
colors = json.loads(colors_raw)
return colors["color7"]
#+end_src

#+RESULTS: color7
: #dfd7c6

#+name: color8
#+begin_src python :var colors_raw=theme-colors-json :results value
import json
colors = json.loads(colors_raw)
return colors["color8"]
#+end_src

#+RESULTS: color8
: #9c968a

#+name: color9
#+begin_src python :var colors_raw=theme-colors-json :results value
import json
colors = json.loads(colors_raw)
return colors["color9"]
#+end_src

#+RESULTS: color9
: #948B77

#+name: color10
#+begin_src python :var colors_raw=theme-colors-json :results value
import json
colors = json.loads(colors_raw)
return colors["color10"]
#+end_src

#+RESULTS: color10
: #A1967E

#+name: color11
#+begin_src python :var colors_raw=theme-colors-json :results value
import json
colors = json.loads(colors_raw)
return colors["color11"]
#+end_src

#+RESULTS: color11
: #9D9882

#+name: color12
#+begin_src python :var colors_raw=theme-colors-json :results value
import json
colors = json.loads(colors_raw)
return colors["color12"]
#+end_src

#+RESULTS: color12
: #A79C83

#+name: color13
#+begin_src python :var colors_raw=theme-colors-json :results value
import json
colors = json.loads(colors_raw)
return colors["color13"]
#+end_src

#+RESULTS: color13
: #B5A98D

#+name: color14
#+begin_src python :var colors_raw=theme-colors-json :results value
import json
colors = json.loads(colors_raw)
return colors["color14"]
#+end_src

#+RESULTS: color14
: #C8B999

#+name: color15
#+begin_src python :var colors_raw=theme-colors-json :results value
import json
colors = json.loads(colors_raw)
return colors["color15"]
#+end_src

#+RESULTS: color15
: #dfd7c6

* Variables - Paths
All shared niri variables are set in this section. This overcomes the limitation that .kdl
has in using variables. Other ways to work around this in niri is to place most logic
in shell scripts which simplifies constructing commands.
#+NAME: niri_scripts
#+BEGIN_SRC python :results value
  return "~/.config/niri/scripts"
#+END_SRC

#+RESULTS: niri_scripts
: ~/.config/niri/scripts

#+NAME: niri_toolkit
#+BEGIN_SRC python :results value
  return "~/projects/niri_toolkit"
#+END_SRC

#+RESULTS: niri_toolkit
: ~/projects/niri_toolkit

#+NAME: screenshot_path
#+BEGIN_SRC python :results value
  return "~/Pictures/screenshots"
#+END_SRC

#+RESULTS: screenshot_path
: ~/Pictures/screenshots

#+NAME: screenshot_file
#+BEGIN_SRC python :results value
  return "Screenshot-from-%Y-%m-%d-%H-%M-%S.png"  
#+END_SRC

#+RESULTS: screenshot_file
: Screenshot-from-%Y-%m-%d-%H-%M-%S.png

* Variables - Apps & Scripts
All my applications and shells scripts are set to variables here. This gives a little bit more
flexibility in constructing more complex statements mostly in the use of quoting. This also
give you the opportunity to execute some preprocessing logic if necessary.
#+NAME: bindings
#+BEGIN_SRC python :var _temp=niri_scripts :results value
  _temp = f'{_temp}/rofi_bindings'
  return f'"\\"{_temp}\\""'  
#+END_SRC

#+RESULTS: bindings
: "~/.config/niri/scripts/rofi_bindings"

#+NAME: launcher
#+BEGIN_SRC python :var _temp=niri_scripts :results value
  _temp = f"{_temp}/rofi_launcher"
  return f'"\\"{_temp}\\""'    
#+END_SRC

#+RESULTS: launcher
: "~/.config/niri/scripts/rofi_launcher"

#+NAME: bluetooth
#+BEGIN_SRC python :var _temp=niri_scripts :results value
  _temp = f"{_temp}/rofi_bluetooth"
  return f'"\\"{_temp}\\""'    
#+END_SRC

#+RESULTS: bluetooth
: "~/.config/niri/scripts/rofi_bluetooth"

#+NAME: power_menu
#+BEGIN_SRC python :var _temp=niri_scripts :results value
  _temp = f"{_temp}/rofi_powermenu"
  return f'"\\"{_temp}\\""'    
#+END_SRC

#+RESULTS: power_menu
: "~/.config/niri/scripts/rofi_powermenu"

#+NAME: music
#+BEGIN_SRC python :var _temp=niri_scripts :results value
  _temp = f"{_temp}/rofi_music"
  return f'"\\"{_temp}\\""'    
#+END_SRC

#+RESULTS: music
: "~/.config/niri/scripts/rofi_music"

#+NAME: network
#+BEGIN_SRC python :var _temp=niri_scripts :results value
  _temp = f"{_temp}/rofi_network"
  return f'"\\"{_temp}\\""'    
#+END_SRC

#+RESULTS: network
: "~/.config/niri/scripts/rofi_network"

#+NAME: show_windows
#+BEGIN_SRC python :var _temp=niri_scripts :results value
  _temp = f"{_temp}/rofi_showwindows"
  return f'"\\"{_temp}\\""'    
#+END_SRC

#+RESULTS: show_windows
: "~/.config/niri/scripts/rofi_showwindows"

#+NAME: term
#+BEGIN_SRC python :var _temp=niri_scripts :results value
  _temp = f"{_temp}/alacritty"
  return f'"\\"{_temp}\\""'    
#+END_SRC

#+RESULTS: term
: "~/.config/niri/scripts/alacritty"

#+NAME: lock_screen
#+BEGIN_SRC python :var _temp=niri_scripts :results value
  _temp = f"{_temp}/lockscreen"
  return f'"\\"{_temp}\\""'    
#+END_SRC

#+RESULTS: lock_screen
: "~/.config/niri/scripts/lockscreen"

#+NAME: scratchpad_put
#+BEGIN_SRC python :var _temp=niri_toolkit :results value
  _temp = f"{_temp}/niri_scratchpad"  
  cmd = [
      f'"{_temp}"',
      '"--action"', '"put"',
      '"--scratchpad_name"', '"scratchpad"'
  ]
  return " ".join(cmd)  
#+END_SRC

#+RESULTS: scratchpad_put
: "~/projects/niri_toolkit/niri_scratchpad" "--action" "put" "--scratchpad_name" "scratchpad"

#+NAME: scratchpad_get
#+BEGIN_SRC python :var _temp=niri_toolkit :results value
  _temp = f"{_temp}/niri_scratchpad"    
  cmd = [
      f'"{_temp}"',
      '"--action"', '"get"',
      '"--scratchpad_name"', '"scratchpad"'
  ]
  return " ".join(cmd)  
#+END_SRC

#+RESULTS: scratchpad_get
: "~/projects/niri_toolkit/niri_scratchpad" "--action" "get" "--scratchpad_name" "scratchpad"

#+NAME: emacs_prod
#+BEGIN_SRC python :results value
      cmd = [
          '"emacsclient"',
          '"-c"',
          '"-s"', '"emacs-prod"'
      ]
      return " ".join(cmd)  
#+END_SRC

#+RESULTS: emacs_prod
: "emacsclient" "-c" "-s" "emacs-prod"

#+NAME: emacs_dev
#+BEGIN_SRC python :results value
    cmd = [
        '"emacsclient"',
        '"-c"', 
        '"-s"', '"emacs-dev"'
    ]
    return " ".join(cmd)  
#+END_SRC

#+RESULTS: emacs_dev
: "emacsclient" "-c" "-s" "emacs-dev"

#+NAME: file_gui
#+BEGIN_SRC python
  return f'"\\"thunar\\""'
#+END_SRC

#+RESULTS: file_gui
: "thunar"


#+NAME: file_term
#+BEGIN_SRC python :results value
cmd = [
    '"sh"',
    '"-c"', '"kitty --detach yazi"'
]
return " ".join(cmd)
#+END_SRC

#+RESULTS: file_term
: "sh" "-c" "kitty --detach yazi"

#+NAME: browser
#+BEGIN_SRC python
  return f'"\\"vivaldi-snapshot\\""'
#+END_SRC

#+RESULTS: browser
: "vivaldi-snapshot"

#+NAME: notes
#+BEGIN_SRC python
  return f'"\\"pluma\\""'  
#+END_SRC

#+RESULTS: notes
: "pluma"

#+NAME: email_get
#+BEGIN_SRC python :var _temp=niri_toolkit :results value
  _temp = f"{_temp}/niri-move-window.py"
  cmd = [
      f'"{_temp}"',
      '"--match"', '"mu4e"',
      '"--target"', '"m"',
      '"--target_id"', '"HDMI-A-2"',
      '"--focus"'
  ]
  return " ".join(cmd)
#+END_SRC

#+RESULTS: email_get
: "~/projects/niri_toolkit/niri-move-window.py" "--match" "mu4e" "--target" "m" "--target_id" "HDMI-A-2" "--focus"

#+NAME: email_put
#+BEGIN_SRC python :var _temp=niri_toolkit :results value
  _temp = f"{_temp}/niri-move-window.py"
  cmd = [
      f'"{_temp}"',
      '"--match"', '"mu4e"',
      '"--target"', '"w"',
      '"--target_id"', '"messaging"'
  ]
  return " ".join(cmd)
#+END_SRC

#+RESULTS: email_put
: "~/projects/niri_toolkit/niri-move-window.py" "--match" "mu4e" "--target" "w" "--target_id" "messaging"

#+NAME: sms_get
#+BEGIN_SRC python :var _temp=niri_toolkit :results value
  _temp = f"{_temp}/niri-move-window.py"
  cmd = [
      f'"{_temp}"',
      '"--match"', '"Messages"',
      '"--target"', '"m"',
      '"--target_id"', '"HDMI-A-2"',
      '"--focus"'
  ]
  return " ".join(cmd)
#+END_SRC

#+RESULTS: sms_get
: "~/projects/niri_toolkit/niri-move-window.py" "--match" "Messages" "--target" "m" "--target_id" "HDMI-A-2" "--focus"

#+NAME: sms_put
#+BEGIN_SRC python :var _temp=niri_toolkit :results value
  _temp = f"{_temp}/niri-move-window.py"
  cmd = [
      f'"{_temp}"',
      '"--match"', '"Messages"',
      '"--target"', '"w"',
      '"--target_id"', '"messaging"'
  ]
  return " ".join(cmd)
#+END_SRC

#+RESULTS: sms_put
: "~/projects/niri_toolkit/niri-move-window.py" "--match" "Messages" "--target" "w" "--target_id" "messaging"

#+NAME: audio_raise_volume
#+BEGIN_SRC python :results value
  cmd = [
      '"wpctl"',
      '"set-volume"',
      '"@DEFAULT_AUDIO_SINK@"',
      '"0.1+"'
  ]
  return " ".join(cmd)
#+END_SRC

#+RESULTS: audio_raise_volume
: "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1+"

#+NAME: audio_lower_volume
#+BEGIN_SRC python :results value
  cmd = [
      '"wpctl"',
      '"set-volume"',
      '"@DEFAULT_AUDIO_SINK@"',
      '"0.1-"'
  ]
  return " ".join(cmd)
#+END_SRC

#+RESULTS: audio_lower_volume
: "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1-"

#+NAME: audio_mute
#+BEGIN_SRC python :results value
  cmd = [
      '"wpctl"',
      '"set-mute"',
      '"@DEFAULT_AUDIO_SINK@"',
      '"toggle"'
  ]
  return " ".join(cmd)
#+END_SRC

#+RESULTS: audio_mute
: "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"

#+NAME: audio_mic_mute
#+BEGIN_SRC python :results value
  cmd = [
      '"wpctl"',
      '"set-mute"',
      '"@DEFAULT_AUDIO_SOURCE@"',
      '"toggle"'
  ]
  return " ".join(cmd)
#+END_SRC

#+RESULTS: audio_mic_mute
: "wpctl" "set-mute" "@DEFAULT_AUDIO_SOURCE@" "toggle"


#+NAME: idle_lock
#+BEGIN_SRC python :results value
  cmd = [
      '"sh"',
      '"-c"',
      '"swayidle -w timeout 600 <<niri_scripts()>>/lockscreen"'
  ]
  return " ".join(cmd)
#+END_SRC

#+RESULTS: idle_lock
: "sh" "-c" "swayidle -w timeout 600 ~/.config/niri/scripts/lockscreen"

#+NAME: setup_theme
#+BEGIN_SRC python :var _temp=niri_scripts :results value
  _temp = f"{_temp}/setup_theme"
  return f'"\\"{_temp}\\""'    
#+END_SRC

#+RESULTS: setup_theme
: "~/.config/niri/scripts/setup_theme"

#+NAME: wallpaper
#+BEGIN_SRC python :var _temp=niri_scripts :results value
  _temp = f"{_temp}/wallpaper"
  return f'"\\"{_temp}\\""'    
#+END_SRC

#+RESULTS: wallpaper
: "~/.config/niri/scripts/wallpaper"

#+NAME: notifications
#+BEGIN_SRC python :var _temp=niri_scripts :results value
  _temp = f"{_temp}/notifications"
  return f'"\\"{_temp}\\""'    
#+END_SRC

#+RESULTS: notifications
: "~/.config/niri/scripts/notifications"

#+NAME: status_bar
#+BEGIN_SRC python :var _temp=niri_scripts :results value
  _temp = f"{_temp}/statusbar"
  return f'"\\"{_temp}\\""'    
#+END_SRC

#+RESULTS: status_bar
: "~/.config/niri/scripts/statusbar"

#+NAME: spotify
#+BEGIN_SRC python
  return f'"\\"spotify\\""'      
#+END_SRC

#+RESULTS: spotify
: "spotify"

#+NAME: element
#+BEGIN_SRC python
  return f'"\\"element-desktop\\""'  
#+END_SRC

#+RESULTS: element
: "element-desktop"

#+NAME: sms
#+BEGIN_SRC python
  return f'"\\"googlemessages\\""'  
#+END_SRC

#+RESULTS: sms
: "googlemessages"

#+NAME: calendar
#+BEGIN_SRC python
  return f'"\\"google-calendar-nativefier-dark\\""'  
#+END_SRC

#+RESULTS: calendar
: "google-calendar-nativefier-dark"

#+NAME: discord
#+BEGIN_SRC python
  return f'"\\"vesktop\\""'  
#+END_SRC

#+RESULTS: discord
: "vesktop"

#+NAME: email
#+BEGIN_SRC python
  return f'"\\"geary\\""'  
#+END_SRC

#+RESULTS: email
: "geary"

#+NAME: xwayland
#+BEGIN_SRC python
  return f'"\\"xwayland-satellite\\" \\"--display 2\\""'  
#+END_SRC

#+RESULTS: xwayland
: "xwayland-satellite" "--display 2"

#+NAME: screenshot_viewer
#+BEGIN_SRC python :var _temp=niri_toolkit :results value
  _temp = f"{_temp}/niri-screenshot-picker"
  return f'"\\"{_temp}\\""'    
#+END_SRC

#+RESULTS: screenshot_viewer
: "~/projects/niri_toolkit/niri-screenshot-picker"

#+NAME: screenshot_viewer_emacs
#+BEGIN_SRC python :var _temp=niri_toolkit :results value
  _temp = f"{_temp}/niri-screenshot-picker-emacs"
  return f'"\\"{_temp}\\""'    
#+END_SRC

#+RESULTS: screenshot_viewer_emacs
: "~/projects/niri_toolkit/niri-screenshot-picker-emacs"

#+NAME: niri_hot_change
#+BEGIN_SRC python :var _temp=niri_toolkit :results value
  _temp = f"{_temp}/niri-hot-change"
  return f'"\\"{_temp}\\""'    
#+END_SRC

#+RESULTS: niri_hot_change
: "~/projects/niri_toolkit/niri-hot-change"

* Environment
This sets the niri environment variables. You can also pull environment variables in
externally if you need reference to them which is a limitation in .kdl.  Currently
I only need to set the DISPLAY variable for xwayland.
#+BEGIN_SRC kdl :tangle ./config.kdl
// ## ENVIRONMENT  ###########################################################  
  environment {
          DISPLAY ":1"
  }
#+END_SRC

* Inputs
This section defined inputs such as keyboard, mouse, pen etc. Focus follows mouse it
probably the most critical setting for my use so that when hovering a mouse over
a windows the focus also it set to the window being hovered. I have adopted this sam
behaviour in emacs since using tile managers.
#+BEGIN_SRC kdl :tangle ./config.kdl
// ## INPUT CONFIGURATION ####################################################  
  input {
          keyboard {
                  xkb {
                     // layout "us,ru"
                     // options "grp:win_space_toggle,compose:ralt,ctrl:nocaps"
                  }
                  numlock
          }

          touchpad {
                  // off
                  tap
                  // dwt
                  // dwtp
                  // drag false
                  // drag-lock
                  natural-scroll
                  // accel-speed 0.2
                  // accel-profile "flat"
                  // scroll-method "two-finger"
                  // disabled-on-external-mouse
          }

          mouse {
                  // off
                  natural-scroll
                  accel-speed -0.5
                  accel-profile "flat"
                  scroll-method "no-scroll"
          }

          trackpoint {
                  // off
                  // natural-scroll
                  // accel-speed 0.2
                  // accel-profile "flat"
                  // scroll-method "on-button-down"
                  // scroll-button 273
                  // middle-emulation
          }

          warp-mouse-to-focus

          focus-follows-mouse max-scroll-amount="50%"
  }
#+END_SRC

* Outputs
This section sets the monitor configurations. These are different across environments so there
has to be evaluation performed to determine which monitor configurations get exported to config.kdl.
I've chose emacs-lisp for this because I found the string manipulation to be a little simper than
python, although I'm sure most of it is a limitation in my knowledge.
#+NAME: lenovo-output-config
#+BEGIN_SRC emacs-lisp :eval yes
     (format "%s" "output \"HDMI-A-1\" {

               // off

               mode \"1920x1080@60\"

               scale 1
               transform \"normal\"

               position x=0 y=0
      }
    
      output \"HDMI-A-2\" {

             // off

             mode \"1920x1080@60\"

             scale 1
             transform \"normal\"

             position x=1920 y=0
      }
  
      output \"HDMI-A-3\" {

            // off

            mode \"1920x1080@60\"

            scale 1
            transform \"normal\"

            position x=3840 y=0
      }")  
#+END_SRC

#+RESULTS: lenovo-output-config
#+begin_example
output "HDMI-A-1" {

          // off

          mode "1920x1080@60"

          scale 1
          transform "normal"

          position x=0 y=0
 }

 output "HDMI-A-2" {

        // off

        mode "1920x1080@60"

        scale 1
        transform "normal"

        position x=1920 y=0
 }

 output "HDMI-A-3" {

       // off

       mode "1920x1080@60"

       scale 1
       transform "normal"

       position x=3840 y=0
 }
#+end_example

#+NAME: dell-output-config
#+BEGIN_SRC emacs-lisp :eval yes
     (format "%s" "output \"eDP1\" {

               // off

               mode \"1920x1080@60\"

               scale 1
               transform \"normal\"

               position x=0 y=0
      }")  
#+END_SRC

#+RESULTS: dell-output-config
#+begin_example
output "eDP1" {

          // off

          mode "1920x1080@60"

          scale 1
          transform "normal"

          position x=0 y=0
 }
#+end_example

#+NAME: pi-output-config
#+BEGIN_SRC emacs-lisp :eval yes
     (format "%s" "output \"HDMI-A-1\" {

               // off

               mode \"1920x1080@60\"

               scale 1
               transform \"normal\"

               position x=0 y=0
      }")  
#+END_SRC

#+RESULTS: pi-output-config
#+begin_example
output "HDMI-A-1" {

          // off

          mode "1920x1080@60"

          scale 1
          transform "normal"

          position x=0 y=0
 }
#+end_example

This generates the output section based on the target-system. After now knowing more about how
babel works, this can be done more elegantly and likely doe not need any if statements but just
variable matching logic.
#+NAME: output_config_eval
#+BEGIN_SRC python :eval yes :var loc=lenovo-output-config :var doc=dell-output-config :var poc=pi-output-config :var ts=target-system
  if ts=="lenovo":
      _config=loc
  elif ts=="dell":
      _config=doc
  elif ts=="pi":
      _config=poc
      
  return _config
#+END_SRC

#+RESULTS: output_config_eval
#+begin_example
output "HDMI-A-1" {

          // off

          mode "1920x1080@60"

          scale 1
          transform "normal"

          position x=0 y=0
 }

 output "HDMI-A-2" {

        // off

        mode "1920x1080@60"

        scale 1
        transform "normal"

        position x=1920 y=0
 }

 output "HDMI-A-3" {

       // off

       mode "1920x1080@60"

       scale 1
       transform "normal"

       position x=3840 y=0
 }
#+end_example

#+NAME: output_config
#+BEGIN_SRC kdl :noweb yes :tangle ./config.kdl
// ## OUTPUT CONFIGURATION ####################################################    
  <<output_config_eval()>>
#+END_SRC

* Startup Apps
These are the apps that startup when niri starts. This actually works better in my opinion just
putting all these in a single shell script and calling the shell script which enables
preprocessing and progamatic control to ensure they startup in the correct sequence etc.
#+BEGIN_SRC kdl :noweb yes :eval yes :tangle ./config.kdl
// ## STARTUP APPS  ###########################################################
      spawn-at-startup      <<xwayland()>>  
      spawn-at-startup      <<idle_lock()>>
      spawn-at-startup      <<setup_theme()>>
      spawn-at-startup      <<wallpaper()>>
      spawn-at-startup      <<notifications()>>
      spawn-at-startup      <<status_bar()>>
      spawn-at-startup      <<spotify()>>
      spawn-at-startup      <<element()>>
      spawn-at-startup      <<sms()>>
      spawn-at-startup      <<calendar()>>
      spawn-at-startup      <<discord()>>
#+END_SRC

* Workspaces
This where I setup my static workspaces. These are mostly used for my 3 monitor setup, where I have
a dedicated monitor for these workspaces. Similar to output there needs to evaluation to determine
the target system as this is different between my desktop and laptop.
#+NAME: lenovo-workspace-config
#+BEGIN_SRC emacs-lisp :eval yes
  (format "%s" "
  workspace \"scratchpad\" {
          open-on-output \"HDMI-A-3\"
  }

  workspace \"spotify\" {
          open-on-output \"HDMI-A-3\"
  }

  workspace \"discord\" {
          open-on-output \"HDMI-A-3\"
  }

  workspace \"cameras\" {
          open-on-output \"HDMI-A-3\"
  }

  workspace \"virtbox\" {
          open-on-output \"HDMI-A-3\"
  }

  workspace \"element\" {
          open-on-output \"HDMI-A-3\"
  }

  workspace \"messaging\" {
          open-on-output \"HDMI-A-3\"
  }")  
#+END_SRC

#+RESULTS: lenovo-workspace-config
#+begin_example

workspace "scratchpad" {
        open-on-output "HDMI-A-3"
}

workspace "spotify" {
        open-on-output "HDMI-A-3"
}

workspace "discord" {
        open-on-output "HDMI-A-3"
}

workspace "cameras" {
        open-on-output "HDMI-A-3"
}

workspace "virtbox" {
        open-on-output "HDMI-A-3"
}

workspace "element" {
        open-on-output "HDMI-A-3"
}

workspace "messaging" {
        open-on-output "HDMI-A-3"
}
#+end_example

#+NAME: dell-workspace-config
#+BEGIN_SRC emacs-lisp :eval yes
  (format "%s" "
  workspace \"scratchpad\" {
  }

  workspace \"spotify\" {
  }

  workspace \"discord\" {
  }

  workspace \"element\" {
  }

  workspace \"messaging\" {
  }")  
#+END_SRC

#+RESULTS: dell-workspace-config
#+begin_example

workspace "scratchpad" {
}

workspace "spotify" {
}

workspace "discord" {
}

workspace "element" {
}

workspace "messaging" {
}
#+end_example

#+NAME: pi-workspace-config
#+BEGIN_SRC emacs-lisp :eval yes
  (format "%s" "
  workspace \"scratchpad\" {
  }

  workspace \"spotify\" {
  }

  workspace \"discord\" {
  }

  workspace \"element\" {
  }

  workspace \"messaging\" {
  }")  
#+END_SRC

#+RESULTS: pi-workspace-config
#+begin_example

workspace "scratchpad" {
}

workspace "spotify" {
}

workspace "discord" {
}

workspace "element" {
}

workspace "messaging" {
}
#+end_example

This section will determine which workspace configuration to output into config.kdl.
#+NAME: workspace_config_eval
#+BEGIN_SRC python :eval yes :var loc=lenovo-workspace-config :var doc=dell-workspace-config :var poc=pi-workspace-config :var ts=target-system
  if ts=="lenovo":
      _config=loc
  elif ts=="dell":
      _config=doc
  elif ts=="pi":
      _config=poc
      
  return _config
#+END_SRC

#+RESULTS: workspace_config_eval
#+begin_example

workspace "scratchpad" {
        open-on-output "HDMI-A-3"
}

workspace "spotify" {
        open-on-output "HDMI-A-3"
}

workspace "discord" {
        open-on-output "HDMI-A-3"
}

workspace "cameras" {
        open-on-output "HDMI-A-3"
}

workspace "virtbox" {
        open-on-output "HDMI-A-3"
}

workspace "element" {
        open-on-output "HDMI-A-3"
}

workspace "messaging" {
        open-on-output "HDMI-A-3"
}
#+end_example

#+BEGIN_SRC kdl :noweb yes :tangle ./config.kdl
// ## SETUP WORKSPACES ##################################################    
  <<workspace_config_eval()>>
#+END_SRC

* Other
Niri has some miscellaneous config options that I've placed in this section. I've created
my own hotkey overlay referenced later.
#+BEGIN_SRC kdl :tangle ./config.kdl
// ## MISCELLANEOUS ##########################################################  
  hotkey-overlay {
          skip-at-startup
  }
#+END_SRC

* Layout
This section defines the basic layout, decorations and animations. Since niri supports hot
loading a config, I've toyed with the idea of creating a popup based on this content that
will allow me to change it on the fly and save the configurations to reapply periodically.
So for example, you would hit key sequence which pops up a window of these values, alter
the values save the config and apply. This would allow for quick visual changes to fine tune
QOL.
#+BEGIN_SRC kdl :tangle ./config.kdl :noweb yes :eval no :results value
  // ## LAYOUT CONFIGURATION ####################################################  
      layout {
              gaps 4

              center-focused-column "never"
            
              always-center-single-column

              preset-column-widths {
                      proportion 0.33333
                      proportion 0.5
                      proportion 0.66667
                      proportion 0.9
                      proportion 1.0
              }

              // preset-window-heights { }

              // default-column-width { proportion 0.5; }

              default-column-width {}

              // draw-border-with-background

              background-color "transparent"

              focus-ring {
                      // off
                      width 2
                      // active-color "<<foreground()>>"
                      // inactive-color "<<background()>>"
                      // active-color "<<color4()>>"
                      // inactive-color "<<background()>>"
                      // active-gradient from="#80c8ff" to="#bbddff" angle=45
                      // inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
              }


              border {
                      off
                      width 1
                      active-color "#ffc87f"
                      inactive-color "#505050"
                      urgent-color "#9b0000"
                      active-gradient from="#ffbb66" to="#ffc880" angle=45 relative-to="workspace-view"
                      inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
              }
              
              shadow {
                      // on
                      draw-behind-window false
                      softness 30
                      spread 5
                      offset x=0 y=5
                      color "#00000080"
                      inactive-color "#00000060"
              }

              struts {
                      left 0
                      right 0
                      top 0
                      bottom 0
              }

              tab-indicator {
                      // off
                      hide-when-single-tab
                      place-within-column
                      gap 5
                      width 15
                      length total-proportion=1.0
                      position "top"
                      gaps-between-tabs 5
                      corner-radius 8
                      active-color "bf616a"
                      inactive-color "gray"
                      // active-gradient from="#80c8ff" to="#bbddff" angle=45
                      // inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
              }

              insert-hint {
                      // off
                      color "#ffc87f80"
                      gradient from="#ffbb6680" to="#ffc88080" angle=45 relative-to="workspace-view"
              }
      }
      // ## COMPOSITOR / OTHER CONFIGURATION ########################################
      prefer-no-csd

      screenshot-path "<<screenshot_path()>>/<<screenshot_file()>>"

      // ## ANIMATIONS ##############################################################
      animations {
          // off

       workspace-switch {
                      spring damping-ratio=2.0 stiffness=1000 epsilon=0.0001
              }

              window-open {
                      duration-ms 250
                      curve "ease-out-cubic"
              }

              window-close {
                      duration-ms 250
                      curve "ease-out-quad"
              }

              horizontal-view-movement {
                      spring damping-ratio=2.0 stiffness=500 epsilon=0.0001
              }

              window-movement {
                      spring damping-ratio=2.0 stiffness=500 epsilon=0.0001
              }

              window-resize {
                      spring damping-ratio=2.0 stiffness=500 epsilon=0.0001
              }

              config-notification-open-close {
                      spring damping-ratio=0.6 stiffness=500 epsilon=0.001
              }

              screenshot-ui-open {
                      duration-ms 200
                      curve "ease-out-quad"
              }

              overview-open-close {
                      spring damping-ratio=2.0 stiffness=500 epsilon=0.0001
              }

      }

      cursor {
              xcursor-theme "Qogirr"
              xcursor-size 12
              hide-when-typing
              //hide-after-inactive-ms 1000
      }

      // ## OVERVIEW SETTINGS ############################################################
      overview {
      	// backdrop-color "#566870"
              zoom 0.625
              workspace-shadow {
      	 	off
      	}
      }
#+END_SRC

* Window Rules
This section defines the window rules for my windows. I mostly use this to set an app to
floating / size and to assign the app to a specific workspace.
#+BEGIN_SRC kdl :tangle ./config.kdl
  // ## WINDOW / LAYER RULES #####################################################  
      window-rule {
              default-column-width {}
              geometry-corner-radius 10
              clip-to-geometry true
              draw-border-with-background false
              opacity 0.60
      }

      window-rule {
              match is-active=true
              opacity 1.0
      }

      window-rule {
              match app-id="pluma"
              open-floating true
      }

      window-rule {
              match app-id="Sxiv"
              open-floating true
              open-fullscreen true
      }

      window-rule {
              match app-id="emacs"
              open-floating false
              open-maximized true
      }

      window-rule {
              match app-id="org.pwmt.zathura"
              open-floating true
              default-column-width { fixed 900; }
              default-window-height { fixed 900; }
      }

      window-rule {
              match app-id="qalculate-gtk"
              open-floating true
              default-column-width { fixed 400; }
              default-window-height { fixed 400; }
      }

      window-rule {
              match app-id="Alacritty"
              open-floating true
              default-column-width { fixed 900; }
              default-window-height { fixed 900; }
      }

      window-rule {
              match app-id="Spotify"
              match app-id="spotify"
              open-on-workspace "spotify"
              open-maximized true
      }

      window-rule {
              match app-id="vesktop"
              open-on-workspace "discord"
              open-maximized true
      }

      window-rule {
              match app-id="org.cctv-viewer.cctv-viewer"
              open-on-workspace "cameras"
              open-maximized true
              opacity 1.0
      }

      window-rule {
              match app-id="VirtualBox Manager"
              open-on-workspace "virtbox"
              open-maximized true
      }

      window-rule {
              match app-id="Element"
              open-on-workspace "element"
              open-maximized true
      }

      window-rule {
              match app-id="GoogleMessages"
              open-on-workspace "messaging"
              open-maximized true
      }

      window-rule {
              match app-id="org.kde.kdeconnect.sms"
              open-on-workspace "messaging"
              open-maximized true
      }

      window-rule {
              match app-id="org.gnome.Geary"
              open-on-workspace "messaging"
              open-maximized true
      }

      window-rule {
              match app-id="googlecalendardark-nativefier-e22938"
              open-on-workspace "messaging"
              open-maximized true
      }
    
      window-rule {
              match app-id="feh"
              open-floating true
              default-column-width { fixed 1200; }
              default-window-height { fixed 800; }
      }

      window-rule {
            match app-id="Tk"
            open-floating true
            default-column-width { fixed 1050; }
            default-window-height { fixed 325; }
      }

      layer-rule {
              place-within-backdrop true
      }
#+END_SRC

* Bindings
This is the bindings data section. Each key binding is loaded into a python dict which contains
5 columns:

1) Keybinding - the key sequence (e.g. Mod+Shift+X).
2) Command - the command to invoke (.e.g. "floorp").
3) Spawn Y | N - if a spawn command needs to be prepended to the command.
4) Description - A description of the binding to be used for a custom hotkey overlay.
5) Target "" (all) | all (common) | lenovo | dell - The target system for the keybinding. If
   the target is left blank it will generate all keybindings which is used for documenting
   the overlay. If you pass a target system in like "lenovo" it will return the commond
   bindings use across all systems plus the lenovo specific ones.
#+NAME: keybindings-data
#+BEGIN_SRC python :noweb= yes :results value :var _niri_hot_change=niri_hot_change :var _bindings=bindings :var _launcher=launcher :var _bluetooth=bluetooth :var _power_menu=power_menu :var _music=music :var _network=network :var _show_windows=show_windows :var _emacs_prod=emacs_prod :var _emacs_dev=emacs_dev :var _file_gui=file_gui :var _file_term=file_term :var _browser=browser :var _notes=notes :var _sms_get=sms_get :var _sms_put=sms_put :var _email_get=email_get :var _email_put=email_put :var _scratchpad_put=scratchpad_put :var _scratchpad_get=scratchpad_get :var _term=term :var _lock_screen=lock_screen :var _audio_raise_volume=audio_raise_volume :var _audio_lower_volume=audio_lower_volume :var _audio_mute=audio_mute :var _audio_mic_mute=audio_mic_mute :var _screenshot_viewer=screenshot_viewer :var _screenshot_viewer_emacs=screenshot_viewer_emacs
        return [
            ("Mod+Shift+Slash", _bindings, "Y", "Niri Key Bindings", "all"),
            ("Mod+D", _launcher,"Y", "Launcher", "all"),
            ("Mod+B", _bluetooth, "Y", "Bluetooth", "all"),
            ("Mod+M", _music, "Y", "Music", "all"),
            ("Mod+N", _network, "Y", "Network", "all"),
            ("Mod+Shift+D", _show_windows, "Y", "Show Active Windows", "all"),
            ("Mod+E", _emacs_prod, "Y", "Emacs - Prod", "all"),
            ("Mod+Shift+E", _emacs_dev, "Y", "Emacs - Dev", "lenovo"),
            ("Mod+T", _file_gui, "Y", "File Manager - GUI", "all"),
            ("Mod+Shift+Y", _file_term, "Y", "File Manager - Term", "all"),
            ("Mod+Shift+N", _notes, "Y", "Notes", "all"),
            ("Mod+1", _sms_get, "Y", "SMS Get", "all"),
            ("Mod+Shift+1", _sms_put, "Y", "SMS Put", "all"),
            ("Mod+2", _email_get, "Y", "Email Get", "all"),
            ("Mod+Shift+2", _email_put, "Y", "Email Put", "all"),
            ("Mod+P", _scratchpad_put, "Y", "Scratchpad Put", "all"),
            ("Mod+Shift+P", _scratchpad_get, "Y", "Scratchpad Get", "all"),
            ("Mod+Return", _term, "Y", "Terminal", "all"),
            ("Mod+Alt+L", _lock_screen, "Y", "Lock Screen", "all"),
            ("XF86AudioRaiseVolume allow-when-locked=true", _audio_raise_volume, "Y", "Vol+", "all"),
            ("XF86AudioLowerVolume allow-when-locked=true", _audio_lower_volume, "Y", "Vol-", "all"),
            ("XF86AudioMute allow-when-locked=true", _audio_mute, "Y", "Mute", "all"),
            ("XF86AudioMicMute allow-when-locked=true", _audio_mic_mute, "Y", "Mic Mute", "all"),
            ("Mod+Shift+S", _screenshot_viewer, "Y", "Screenshot Picker", "all"),
            ("Mod+Ctrl+S", _screenshot_viewer_emacs, "Y", "Screenshot Picker - Emacs", "lenovo"),
            ("Mod+Shift+T", _niri_hot_change, "Y", "Niri Hot Change Config", "all"),
            ("Mod+S", "screenshot", "N", "Screenshot", "all"),                                          
            ("Mod+O repeat=false", "toggle-overview", "N", "Toggle Overview", "all"),                           
            ("Mod+Q", "close-window", "N", "Close Window", "all"),                                       
            ("Mod+h", "focus-column-left", "N", "Focus Column Left", "all"),                
            ("Mod+j", "focus-window-down", "N", "Focus Column Down", "all"),                                       
            ("Mod+k", "focus-window-up", "N", "Focus Window Down", "all"),                  
            ("Mod+l", "focus-column-right", "N", "Focus Column Right", "all"),                                      
            ("Mod+Shift+h", "move-column-left", "N", "Move Column Left", "all"),                                  
            ("Mod+Shift+j", "move-window-down", "N", "Move Window Down", "all"),                               
            ("Mod+Shift+k", "move-window-up", "N", "Move Window Up", "all"),                               
            ("Mod+Shift+l", "move-column-right", "N", "Move Column Right", "all"),                                
            ("Mod+Home", "focus-column-first", "N", "Focus Column First", "all"),                                   
            ("Mod+End",  "focus-column-last", "N", "Focus Column Last", "all"),                                  
            ("Mod+Ctrl+Home", "move-column-to-first", "N", "Move Column To First", "all"),
            ("Mod+Ctrl+End", "move-column-to-last", "N", "Move Column To Last", "all"),                               
            ("Mod+Ctrl+h", "focus-monitor-left", "N", "Focus Monitor Left", "all"),                                 
            ("Mod+Ctrl+j", "focus-monitor-down", "N", "Focus Monitor Down", "all"),           
            ("Mod+Ctrl+k", "focus-monitor-up", "N", "Focus Monitor Up", "all"),
            ("Mod+Ctrl+l", "focus-monitor-right", "N", "Focus Monitor Right", "all"),
            ("Mod+Shift+Ctrl+h", "move-column-to-monitor-left", "N", "Move Column To Monitor Left", "all"),
            ("Mod+Shift+Ctrl+j", "move-column-to-monitor-down", "N", "Move Column To Monitor Down", "all"),
            ("Mod+Shift+Ctrl+k", "move-column-to-monitor-up", "N", "Move Column To Monitor Up", "all"),
            ("Mod+Shift+Ctrl+l", "move-column-to-monitor-right", "N", "Move Column To Monitor Right", "all"),
            ("Mod+Page_Down", "focus-workspace-down", "N", "Focus Workspace Down", "all"),
            ("Mod+Page_Up", "focus-workspace-up", "N", "Focus Workspace Up", "all"),
            ("Mod+U", "focus-workspace-down", "N", "Focus Workspace Down", "all"),
            ("Mod+I", "focus-workspace-up", "N", "Focus Workspace Up", "all"),
            ("Mod+Ctrl+Page_Down", "move-column-to-workspace-down", "N", "Move Column To Workspace Down", "all"),
            ("Mod+Ctrl+Page_Up", "move-column-to-workspace-up", "N", "Move Column To Workspace Up", "all"),
            ("Mod+Ctrl+U", "move-column-to-workspace-down", "N", "Move Column To Workspace Down", "all"),
            ("Mod+Ctrl+I", "move-column-to-workspace-up", "N", "Move Column To Workspace Up", "all"),
            ("Mod+Shift+Page_Down", "move-workspace-down", "N", "Move Workspace Down", "all"),
            ("Mod+Shift+Page_Up", "move-workspace-up", "N", "Move Workspace Up", "all"),
            ("Mod+Shift+U", "move-workspace-down", "N", "Move Workspace Down", "all"),
            ("Mod+Shift+I", "move-workspace-up", "N", "Move Workspace Up", "all"),
            ("Mod+WheelScrollDown cooldown-ms=150", "focus-workspace-down", "N", "Focus Workspace Down", "all"),
            ("Mod+WheelScrollUp cooldown-ms=150", "focus-workspace-up", "N", "Focus Workspace Up", "all"),
            ("Mod+Ctrl+WheelScrollDown cooldown-ms=150", "move-column-to-workspace-down", "N", "Move Column To Workspace Down", "all"),
            ("Mod+Ctrl+WheelScrollUp cooldown-ms=150", "move-column-to-workspace-up", "N", "Move Column To Workspace Up", "all"),
            ("Mod+Shift+WheelScrollDown", "focus-column-right", "N", "Focus Column Right", "all"),
            ("Mod+Shift+WheelScrollUp", "focus-column-left", "N", "Focus Column Left", "all"),
            ("Mod+Ctrl+Shift+WheelScrollDown", "move-column-right", "N", "Move Column Right", "all"),
            ("Mod+Ctrl+Shift+WheelScrollUp", "move-column-left", "N", "Move Column Left", "all"),
            ("Mod+Tab", "focus-workspace-previous", "N", "Focus Workspace Previous", "all"),
            ("Mod+BracketLeft", "consume-or-expel-window-left", "N", "Consume Or Expel Window Left", "all"),
            ("Mod+BracketRight", "consume-or-expel-window-right", "N", "Consume Or Expel Window Right", "all"),
            ("Mod+Comma", "consume-window-into-column", "N", "Consume Window Into Column", "all"),
            ("Mod+Period", "expel-window-from-column", "N", "Expel Window From Column", "all"),
            ("Mod+R", "switch-preset-column-width", "N", "Switch Preset Column Width", "all"),
            ("Mod+Shift+R", "switch-preset-window-height", "N", "Switch Preset Column Height", "all"),
            ("Mod+Ctrl+R", "reset-window-height", "N", "Reset Window Height", "all"),
            ("Mod+F", "maximize-column", "N", "Maximize Column", "all"),
            ("Mod+Shift+F", "fullscreen-window", "N", "Fullscreen Window", "all"),
            ("Mod+Ctrl+F", "expand-column-to-available-width", "N", "Expand Column To Available Width", "all"),
            ("Mod+C", "center-column", "N", "Center Column", "all"),
            ("Mod+Ctrl+C", "center-visible-columns", "N", "Center Visible Columns", "all"),
            ("Mod+Minus", "set-column-width \"-10%\"", "N", "Set Column Width -10%", "all"),
            ("Mod+Equal", "set-column-width \"+10%\"", "N", "Set Column Width +10%", "all"),
            ("Mod+Ctrl+Minus", "set-column-width \"-1\"", "N", "Set Column Width -1", "all"),
            ("Mod+Ctrl+Equal", "set-column-width \"+1\"", "N", "Set Column Width +1", "all"),
            ("Mod+Shift+Minus", "set-window-height \"-10%\"", "N", "Set Window Height -10%", "all"),
            ("Mod+Shift+Equal", "set-window-height \"+10%\"", "N", "Set Window Height +10%", "all"),
            ("Mod+Shift+Ctrl+Minus", "set-window-height \"-1\"", "N", "Set Window Height -1", "all"),
            ("Mod+Shift+Ctrl+Equal", "set-window-height \"+1\"", "N", "Set Window Height +1", "all"),
            ("Mod+0", "set-column-width \"960\"", "N", "Set Column Width", "all"),
            ("Mod+Shift+0", "set-window-height \"540\"", "N", "Set Window Height 540", "all"),
            ("Mod+Alt+0", "set-column-width \"1280\"", "N", "Set Column Width 1280", "all"),
            ("Mod+Shift+Alt+0", "set-window-height \"720\"", "N", "Set Window Height 720", "all"),
            ("Mod+Ctrl+0", "set-column-width \"1920\"", "N", "Set Column Width 1920", "all"),
            ("Mod+Shift+Ctrl+0", "set-window-height \"1080\"", "N", "Set Window Height 1080", "all"),
            ("Mod+V", "toggle-window-floating", "N", "Toggle Window Floating", "all"),
            ("Mod+Shift+V", "switch-focus-between-floating-and-tiling", "N", "Switch Focus Floating And Tiling", "all"),
            ("Mod+W", "toggle-column-tabbed-display", "N", "Toggle Column Tabbed Display", "all"),
            ("Mod+Space", "switch-layout \"next\"", "N", "Switch Layout - Next", "all"),
            ("Mod+Shift+Space", "switch-layout \"prev\"", "N", "Switch Layout - Prev", "all"),
            ("Print", "screenshot", "N", "Screenshot", "all"),
            ("Ctrl+Print", "screenshot-screen", "N", "Screenshot Sreen", "all"),
            ("Alt+Print", "screenshot-window", "N", "Screenshot Window", "all"),
            ("Mod+Escape allow-inhibiting=false", "toggle-keyboard-shortcuts-inhibit", "N", "Toggle Keyboard Shortcuts - Inhibit", "all"),
            ("Ctrl+Alt+Delete", "quit", "N", "Quit", "all",)
        ]
#+END_SRC

#+RESULTS: keybindings-data
| Mod+Shift+Slash                             | "~/.config/niri/scripts/rofi_bindings"                                                                               | Y | Niri Key Bindings                   | all    |
| Mod+D                                       | "~/.config/niri/scripts/rofi_launcher"                                                                               | Y | Launcher                            | all    |
| Mod+B                                       | "~/.config/niri/scripts/rofi_bluetooth"                                                                              | Y | Bluetooth                           | all    |
| Mod+M                                       | "~/.config/niri/scripts/rofi_music"                                                                                  | Y | Music                               | all    |
| Mod+N                                       | "~/.config/niri/scripts/rofi_network"                                                                                | Y | Network                             | all    |
| Mod+Shift+D                                 | "~/.config/niri/scripts/rofi_showwindows"                                                                            | Y | Show Active Windows                 | all    |
| Mod+E                                       | "emacsclient" "-c" "-s" "emacs-prod"                                                                                 | Y | Emacs - Prod                        | all    |
| Mod+Shift+E                                 | "emacsclient" "-c" "-s" "emacs-dev"                                                                                  | Y | Emacs - Dev                         | lenovo |
| Mod+T                                       | "thunar"                                                                                                             | Y | File Manager - GUI                  | all    |
| Mod+Shift+Y                                 | "sh" "-c" "kitty --detach yazi"                                                                                      | Y | File Manager - Term                 | all    |
| Mod+Shift+N                                 | "pluma"                                                                                                              | Y | Notes                               | all    |
| Mod+1                                       | "~/projects/niri_toolkit/niri-move-window.py" "--match" "Messages" "--target" "m" "--target_id" "HDMI-A-2" "--focus" | Y | SMS Get                             | all    |
| Mod+Shift+1                                 | "~/projects/niri_toolkit/niri-move-window.py" "--match" "Messages" "--target" "w" "--target_id" "messaging"          | Y | SMS Put                             | all    |
| Mod+2                                       | "~/projects/niri_toolkit/niri-move-window.py" "--match" "mu4e" "--target" "m" "--target_id" "HDMI-A-2" "--focus"     | Y | Email Get                           | all    |
| Mod+Shift+2                                 | "~/projects/niri_toolkit/niri-move-window.py" "--match" "mu4e" "--target" "w" "--target_id" "messaging"              | Y | Email Put                           | all    |
| Mod+P                                       | "~/projects/niri_toolkit/niri_scratchpad" "--action" "put" "--scratchpad_name" "scratchpad"                          | Y | Scratchpad Put                      | all    |
| Mod+Shift+P                                 | "~/projects/niri_toolkit/niri_scratchpad" "--action" "get" "--scratchpad_name" "scratchpad"                          | Y | Scratchpad Get                      | all    |
| Mod+Return                                  | "~/.config/niri/scripts/alacritty"                                                                                   | Y | Terminal                            | all    |
| Mod+Alt+L                                   | "~/.config/niri/scripts/lockscreen"                                                                                  | Y | Lock Screen                         | all    |
| XF86AudioRaiseVolume allow-when-locked=true | "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1+"                                                                   | Y | Vol+                                | all    |
| XF86AudioLowerVolume allow-when-locked=true | "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1-"                                                                   | Y | Vol-                                | all    |
| XF86AudioMute allow-when-locked=true        | "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"                                                                   | Y | Mute                                | all    |
| XF86AudioMicMute allow-when-locked=true     | "wpctl" "set-mute" "@DEFAULT_AUDIO_SOURCE@" "toggle"                                                                 | Y | Mic Mute                            | all    |
| Mod+Shift+S                                 | "~/projects/niri_toolkit/niri-screenshot-picker"                                                                     | Y | Screenshot Picker                   | all    |
| Mod+Ctrl+S                                  | "~/projects/niri_toolkit/niri-screenshot-picker-emacs"                                                               | Y | Screenshot Picker - Emacs           | lenovo |
| Mod+Shift+T                                 | "~/projects/niri_toolkit/niri-hot-change"                                                                            | Y | Niri Hot Change Config              | all    |
| Mod+S                                       | screenshot                                                                                                           | N | Screenshot                          | all    |
| Mod+O repeat=false                          | toggle-overview                                                                                                      | N | Toggle Overview                     | all    |
| Mod+Q                                       | close-window                                                                                                         | N | Close Window                        | all    |
| Mod+h                                       | focus-column-left                                                                                                    | N | Focus Column Left                   | all    |
| Mod+j                                       | focus-window-down                                                                                                    | N | Focus Column Down                   | all    |
| Mod+k                                       | focus-window-up                                                                                                      | N | Focus Window Down                   | all    |
| Mod+l                                       | focus-column-right                                                                                                   | N | Focus Column Right                  | all    |
| Mod+Shift+h                                 | move-column-left                                                                                                     | N | Move Column Left                    | all    |
| Mod+Shift+j                                 | move-window-down                                                                                                     | N | Move Window Down                    | all    |
| Mod+Shift+k                                 | move-window-up                                                                                                       | N | Move Window Up                      | all    |
| Mod+Shift+l                                 | move-column-right                                                                                                    | N | Move Column Right                   | all    |
| Mod+Home                                    | focus-column-first                                                                                                   | N | Focus Column First                  | all    |
| Mod+End                                     | focus-column-last                                                                                                    | N | Focus Column Last                   | all    |
| Mod+Ctrl+Home                               | move-column-to-first                                                                                                 | N | Move Column To First                | all    |
| Mod+Ctrl+End                                | move-column-to-last                                                                                                  | N | Move Column To Last                 | all    |
| Mod+Ctrl+h                                  | focus-monitor-left                                                                                                   | N | Focus Monitor Left                  | all    |
| Mod+Ctrl+j                                  | focus-monitor-down                                                                                                   | N | Focus Monitor Down                  | all    |
| Mod+Ctrl+k                                  | focus-monitor-up                                                                                                     | N | Focus Monitor Up                    | all    |
| Mod+Ctrl+l                                  | focus-monitor-right                                                                                                  | N | Focus Monitor Right                 | all    |
| Mod+Shift+Ctrl+h                            | move-column-to-monitor-left                                                                                          | N | Move Column To Monitor Left         | all    |
| Mod+Shift+Ctrl+j                            | move-column-to-monitor-down                                                                                          | N | Move Column To Monitor Down         | all    |
| Mod+Shift+Ctrl+k                            | move-column-to-monitor-up                                                                                            | N | Move Column To Monitor Up           | all    |
| Mod+Shift+Ctrl+l                            | move-column-to-monitor-right                                                                                         | N | Move Column To Monitor Right        | all    |
| Mod+Page_Down                               | focus-workspace-down                                                                                                 | N | Focus Workspace Down                | all    |
| Mod+Page_Up                                 | focus-workspace-up                                                                                                   | N | Focus Workspace Up                  | all    |
| Mod+U                                       | focus-workspace-down                                                                                                 | N | Focus Workspace Down                | all    |
| Mod+I                                       | focus-workspace-up                                                                                                   | N | Focus Workspace Up                  | all    |
| Mod+Ctrl+Page_Down                          | move-column-to-workspace-down                                                                                        | N | Move Column To Workspace Down       | all    |
| Mod+Ctrl+Page_Up                            | move-column-to-workspace-up                                                                                          | N | Move Column To Workspace Up         | all    |
| Mod+Ctrl+U                                  | move-column-to-workspace-down                                                                                        | N | Move Column To Workspace Down       | all    |
| Mod+Ctrl+I                                  | move-column-to-workspace-up                                                                                          | N | Move Column To Workspace Up         | all    |
| Mod+Shift+Page_Down                         | move-workspace-down                                                                                                  | N | Move Workspace Down                 | all    |
| Mod+Shift+Page_Up                           | move-workspace-up                                                                                                    | N | Move Workspace Up                   | all    |
| Mod+Shift+U                                 | move-workspace-down                                                                                                  | N | Move Workspace Down                 | all    |
| Mod+Shift+I                                 | move-workspace-up                                                                                                    | N | Move Workspace Up                   | all    |
| Mod+WheelScrollDown cooldown-ms=150         | focus-workspace-down                                                                                                 | N | Focus Workspace Down                | all    |
| Mod+WheelScrollUp cooldown-ms=150           | focus-workspace-up                                                                                                   | N | Focus Workspace Up                  | all    |
| Mod+Ctrl+WheelScrollDown cooldown-ms=150    | move-column-to-workspace-down                                                                                        | N | Move Column To Workspace Down       | all    |
| Mod+Ctrl+WheelScrollUp cooldown-ms=150      | move-column-to-workspace-up                                                                                          | N | Move Column To Workspace Up         | all    |
| Mod+Shift+WheelScrollDown                   | focus-column-right                                                                                                   | N | Focus Column Right                  | all    |
| Mod+Shift+WheelScrollUp                     | focus-column-left                                                                                                    | N | Focus Column Left                   | all    |
| Mod+Ctrl+Shift+WheelScrollDown              | move-column-right                                                                                                    | N | Move Column Right                   | all    |
| Mod+Ctrl+Shift+WheelScrollUp                | move-column-left                                                                                                     | N | Move Column Left                    | all    |
| Mod+Tab                                     | focus-workspace-previous                                                                                             | N | Focus Workspace Previous            | all    |
| Mod+BracketLeft                             | consume-or-expel-window-left                                                                                         | N | Consume Or Expel Window Left        | all    |
| Mod+BracketRight                            | consume-or-expel-window-right                                                                                        | N | Consume Or Expel Window Right       | all    |
| Mod+Comma                                   | consume-window-into-column                                                                                           | N | Consume Window Into Column          | all    |
| Mod+Period                                  | expel-window-from-column                                                                                             | N | Expel Window From Column            | all    |
| Mod+R                                       | switch-preset-column-width                                                                                           | N | Switch Preset Column Width          | all    |
| Mod+Shift+R                                 | switch-preset-window-height                                                                                          | N | Switch Preset Column Height         | all    |
| Mod+Ctrl+R                                  | reset-window-height                                                                                                  | N | Reset Window Height                 | all    |
| Mod+F                                       | maximize-column                                                                                                      | N | Maximize Column                     | all    |
| Mod+Shift+F                                 | fullscreen-window                                                                                                    | N | Fullscreen Window                   | all    |
| Mod+Ctrl+F                                  | expand-column-to-available-width                                                                                     | N | Expand Column To Available Width    | all    |
| Mod+C                                       | center-column                                                                                                        | N | Center Column                       | all    |
| Mod+Ctrl+C                                  | center-visible-columns                                                                                               | N | Center Visible Columns              | all    |
| Mod+Minus                                   | set-column-width "-10%"                                                                                              | N | Set Column Width -10%               | all    |
| Mod+Equal                                   | set-column-width "+10%"                                                                                              | N | Set Column Width +10%               | all    |
| Mod+Ctrl+Minus                              | set-column-width "-1"                                                                                                | N | Set Column Width -1                 | all    |
| Mod+Ctrl+Equal                              | set-column-width "+1"                                                                                                | N | Set Column Width +1                 | all    |
| Mod+Shift+Minus                             | set-window-height "-10%"                                                                                             | N | Set Window Height -10%              | all    |
| Mod+Shift+Equal                             | set-window-height "+10%"                                                                                             | N | Set Window Height +10%              | all    |
| Mod+Shift+Ctrl+Minus                        | set-window-height "-1"                                                                                               | N | Set Window Height -1                | all    |
| Mod+Shift+Ctrl+Equal                        | set-window-height "+1"                                                                                               | N | Set Window Height +1                | all    |
| Mod+0                                       | set-column-width "960"                                                                                               | N | Set Column Width                    | all    |
| Mod+Shift+0                                 | set-window-height "540"                                                                                              | N | Set Window Height 540               | all    |
| Mod+Alt+0                                   | set-column-width "1280"                                                                                              | N | Set Column Width 1280               | all    |
| Mod+Shift+Alt+0                             | set-window-height "720"                                                                                              | N | Set Window Height 720               | all    |
| Mod+Ctrl+0                                  | set-column-width "1920"                                                                                              | N | Set Column Width 1920               | all    |
| Mod+Shift+Ctrl+0                            | set-window-height "1080"                                                                                             | N | Set Window Height 1080              | all    |
| Mod+V                                       | toggle-window-floating                                                                                               | N | Toggle Window Floating              | all    |
| Mod+Shift+V                                 | switch-focus-between-floating-and-tiling                                                                             | N | Switch Focus Floating And Tiling    | all    |
| Mod+W                                       | toggle-column-tabbed-display                                                                                         | N | Toggle Column Tabbed Display        | all    |
| Mod+Space                                   | switch-layout "next"                                                                                                 | N | Switch Layout - Next                | all    |
| Mod+Shift+Space                             | switch-layout "prev"                                                                                                 | N | Switch Layout - Prev                | all    |
| Print                                       | screenshot                                                                                                           | N | Screenshot                          | all    |
| Ctrl+Print                                  | screenshot-screen                                                                                                    | N | Screenshot Sreen                    | all    |
| Alt+Print                                   | screenshot-window                                                                                                    | N | Screenshot Window                   | all    |
| Mod+Escape allow-inhibiting=false           | toggle-keyboard-shortcuts-inhibit                                                                                    | N | Toggle Keyboard Shortcuts - Inhibit | all    |
| Ctrl+Alt+Delete                             | quit                                                                                                                 | N | Quit                                | all    |

This is the keybindings-config code block which returns the keybindings base on the
target system. There is mode option which will return the keybinding content to
be used for configuration use or doc use.
#+NAME: keybindings-config
#+BEGIN_SRC python :results value raw :var data=keybindings-data :var ts="" :var mode="config"
lines = []

for mod, cmd, spawn, desc, target in data:
    # Filter by target system
    if target in (ts, "all") or ts == "":
        if mode == "config":
            if spawn.upper() == "Y":
                lines.append(f'{mod:50} {{ spawn {cmd}; }}')
            else:
                lines.append(f'{mod:50} {{ {cmd}; }}')
        elif mode == "doc":
            lines.append(f"{mod:50} {desc}")

return "\n".join(lines)
#+END_SRC

#+RESULTS: keybindings-config
Mod+Shift+Slash                                    { spawn "~/.config/niri/scripts/rofi_bindings"; }
Mod+D                                              { spawn "~/.config/niri/scripts/rofi_launcher"; }
Mod+B                                              { spawn "~/.config/niri/scripts/rofi_bluetooth"; }
Mod+M                                              { spawn "~/.config/niri/scripts/rofi_music"; }
Mod+N                                              { spawn "~/.config/niri/scripts/rofi_network"; }
Mod+Shift+D                                        { spawn "~/.config/niri/scripts/rofi_showwindows"; }
Mod+E                                              { spawn "emacsclient" "-c" "-s" "emacs-prod"; }
Mod+Shift+E                                        { spawn "emacsclient" "-c" "-s" "emacs-dev"; }
Mod+T                                              { spawn "thunar"; }
Mod+Shift+Y                                        { spawn "sh" "-c" "kitty --detach yazi"; }
Mod+Shift+N                                        { spawn "pluma"; }
Mod+1                                              { spawn "~/projects/niri_toolkit/niri-move-window.py" "--match" "Messages" "--target" "m" "--target_id" "HDMI-A-2" "--focus"; }
Mod+Shift+1                                        { spawn "~/projects/niri_toolkit/niri-move-window.py" "--match" "Messages" "--target" "w" "--target_id" "messaging"; }
Mod+2                                              { spawn "~/projects/niri_toolkit/niri-move-window.py" "--match" "mu4e" "--target" "m" "--target_id" "HDMI-A-2" "--focus"; }
Mod+Shift+2                                        { spawn "~/projects/niri_toolkit/niri-move-window.py" "--match" "mu4e" "--target" "w" "--target_id" "messaging"; }
Mod+P                                              { spawn "~/projects/niri_toolkit/niri_scratchpad" "--action" "put" "--scratchpad_name" "scratchpad"; }
Mod+Shift+P                                        { spawn "~/projects/niri_toolkit/niri_scratchpad" "--action" "get" "--scratchpad_name" "scratchpad"; }
Mod+Return                                         { spawn "~/.config/niri/scripts/alacritty"; }
Mod+Alt+L                                          { spawn "~/.config/niri/scripts/lockscreen"; }
XF86AudioRaiseVolume allow-when-locked=true        { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1+"; }
XF86AudioLowerVolume allow-when-locked=true        { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1-"; }
XF86AudioMute allow-when-locked=true               { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }
XF86AudioMicMute allow-when-locked=true            { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SOURCE@" "toggle"; }
Mod+Shift+S                                        { spawn "~/projects/niri_toolkit/niri-screenshot-picker"; }
Mod+Ctrl+S                                         { spawn "~/projects/niri_toolkit/niri-screenshot-picker-emacs"; }
Mod+Shift+T                                        { spawn "~/projects/niri_toolkit/niri-hot-change"; }
Mod+S                                              { screenshot; }
Mod+O repeat=false                                 { toggle-overview; }
Mod+Q                                              { close-window; }
Mod+h                                              { focus-column-left; }
Mod+j                                              { focus-window-down; }
Mod+k                                              { focus-window-up; }
Mod+l                                              { focus-column-right; }
Mod+Shift+h                                        { move-column-left; }
Mod+Shift+j                                        { move-window-down; }
Mod+Shift+k                                        { move-window-up; }
Mod+Shift+l                                        { move-column-right; }
Mod+Home                                           { focus-column-first; }
Mod+End                                            { focus-column-last; }
Mod+Ctrl+Home                                      { move-column-to-first; }
Mod+Ctrl+End                                       { move-column-to-last; }
Mod+Ctrl+h                                         { focus-monitor-left; }
Mod+Ctrl+j                                         { focus-monitor-down; }
Mod+Ctrl+k                                         { focus-monitor-up; }
Mod+Ctrl+l                                         { focus-monitor-right; }
Mod+Shift+Ctrl+h                                   { move-column-to-monitor-left; }
Mod+Shift+Ctrl+j                                   { move-column-to-monitor-down; }
Mod+Shift+Ctrl+k                                   { move-column-to-monitor-up; }
Mod+Shift+Ctrl+l                                   { move-column-to-monitor-right; }
Mod+Page_Down                                      { focus-workspace-down; }
Mod+Page_Up                                        { focus-workspace-up; }
Mod+U                                              { focus-workspace-down; }
Mod+I                                              { focus-workspace-up; }
Mod+Ctrl+Page_Down                                 { move-column-to-workspace-down; }
Mod+Ctrl+Page_Up                                   { move-column-to-workspace-up; }
Mod+Ctrl+U                                         { move-column-to-workspace-down; }
Mod+Ctrl+I                                         { move-column-to-workspace-up; }
Mod+Shift+Page_Down                                { move-workspace-down; }
Mod+Shift+Page_Up                                  { move-workspace-up; }
Mod+Shift+U                                        { move-workspace-down; }
Mod+Shift+I                                        { move-workspace-up; }
Mod+WheelScrollDown cooldown-ms=150                { focus-workspace-down; }
Mod+WheelScrollUp cooldown-ms=150                  { focus-workspace-up; }
Mod+Ctrl+WheelScrollDown cooldown-ms=150           { move-column-to-workspace-down; }
Mod+Ctrl+WheelScrollUp cooldown-ms=150             { move-column-to-workspace-up; }
Mod+Shift+WheelScrollDown                          { focus-column-right; }
Mod+Shift+WheelScrollUp                            { focus-column-left; }
Mod+Ctrl+Shift+WheelScrollDown                     { move-column-right; }
Mod+Ctrl+Shift+WheelScrollUp                       { move-column-left; }
Mod+Tab                                            { focus-workspace-previous; }
Mod+BracketLeft                                    { consume-or-expel-window-left; }
Mod+BracketRight                                   { consume-or-expel-window-right; }
Mod+Comma                                          { consume-window-into-column; }
Mod+Period                                         { expel-window-from-column; }
Mod+R                                              { switch-preset-column-width; }
Mod+Shift+R                                        { switch-preset-window-height; }
Mod+Ctrl+R                                         { reset-window-height; }
Mod+F                                              { maximize-column; }
Mod+Shift+F                                        { fullscreen-window; }
Mod+Ctrl+F                                         { expand-column-to-available-width; }
Mod+C                                              { center-column; }
Mod+Ctrl+C                                         { center-visible-columns; }
Mod+Minus                                          { set-column-width "-10%"; }
Mod+Equal                                          { set-column-width "+10%"; }
Mod+Ctrl+Minus                                     { set-column-width "-1"; }
Mod+Ctrl+Equal                                     { set-column-width "+1"; }
Mod+Shift+Minus                                    { set-window-height "-10%"; }
Mod+Shift+Equal                                    { set-window-height "+10%"; }
Mod+Shift+Ctrl+Minus                               { set-window-height "-1"; }
Mod+Shift+Ctrl+Equal                               { set-window-height "+1"; }
Mod+0                                              { set-column-width "960"; }
Mod+Shift+0                                        { set-window-height "540"; }
Mod+Alt+0                                          { set-column-width "1280"; }
Mod+Shift+Alt+0                                    { set-window-height "720"; }
Mod+Ctrl+0                                         { set-column-width "1920"; }
Mod+Shift+Ctrl+0                                   { set-window-height "1080"; }
Mod+V                                              { toggle-window-floating; }
Mod+Shift+V                                        { switch-focus-between-floating-and-tiling; }
Mod+W                                              { toggle-column-tabbed-display; }
Mod+Space                                          { switch-layout "next"; }
Mod+Shift+Space                                    { switch-layout "prev"; }
Print                                              { screenshot; }
Ctrl+Print                                         { screenshot-screen; }
Alt+Print                                          { screenshot-window; }
Mod+Escape allow-inhibiting=false                  { toggle-keyboard-shortcuts-inhibit; }
Ctrl+Alt+Delete                                    { quit; }
Mod+Shift+Slash                                    { spawn "~/.config/niri/scripts/rofi_bindings"; }
Mod+D                                              { spawn "~/.config/niri/scripts/rofi_launcher"; }
Mod+B                                              { spawn "~/.config/niri/scripts/rofi_bluetooth"; }
Mod+M                                              { spawn "~/.config/niri/scripts/rofi_music"; }
Mod+N                                              { spawn "~/.config/niri/scripts/rofi_network"; }
Mod+Shift+D                                        { spawn "~/.config/niri/scripts/rofi_showwindows"; }
Mod+E                                              { spawn "emacsclient" "-c" "-s" "emacs-prod"; }
Mod+Shift+E                                        { spawn "emacsclient" "-c" "-s" "emacs-dev"; }
Mod+T                                              { spawn "thunar"; }
Mod+Shift+Y                                        { spawn "sh" "-c" "kitty --detach yazi"; }
Mod+Shift+N                                        { spawn "pluma"; }
Mod+1                                              { spawn "~/projects/niri_toolkit/niri-move-window.py" "--match" "Messages" "--target" "m" "--target_id" "HDMI-A-2" "--focus"; }
Mod+Shift+1                                        { spawn "~/projects/niri_toolkit/niri-move-window.py" "--match" "Messages" "--target" "w" "--target_id" "messaging"; }
Mod+2                                              { spawn "~/projects/niri_toolkit/niri-move-window.py" "--match" "mu4e" "--target" "m" "--target_id" "HDMI-A-2" "--focus"; }
Mod+Shift+2                                        { spawn "~/projects/niri_toolkit/niri-move-window.py" "--match" "mu4e" "--target" "w" "--target_id" "messaging"; }
Mod+P                                              { spawn "~/projects/niri_toolkit/niri_scratchpad" "--action" "put" "--scratchpad_name" "scratchpad"; }
Mod+Shift+P                                        { spawn "~/projects/niri_toolkit/niri_scratchpad" "--action" "get" "--scratchpad_name" "scratchpad"; }
Mod+Return                                         { spawn "~/.config/niri/scripts/alacritty"; }
Mod+Alt+L                                          { spawn "~/.config/niri/scripts/lockscreen"; }
XF86AudioRaiseVolume allow-when-locked=true        { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1+"; }
XF86AudioLowerVolume allow-when-locked=true        { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1-"; }
XF86AudioMute allow-when-locked=true               { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }
XF86AudioMicMute allow-when-locked=true            { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SOURCE@" "toggle"; }
Mod+Shift+S                                        { spawn "~/projects/niri_toolkit/niri-screenshot-picker"; }
Mod+Ctrl+S                                         { spawn "~/projects/niri_toolkit/niri-screenshot-picker-emacs"; }
Mod+Shift+T                                        { spawn "~/projects/niri_toolkit/niri-hot-change"; }
Mod+S                                              { screenshot; }
Mod+O repeat=false                                 { toggle-overview; }
Mod+Q                                              { close-window; }
Mod+h                                              { focus-column-left; }
Mod+j                                              { focus-window-down; }
Mod+k                                              { focus-window-up; }
Mod+l                                              { focus-column-right; }
Mod+Shift+h                                        { move-column-left; }
Mod+Shift+j                                        { move-window-down; }
Mod+Shift+k                                        { move-window-up; }
Mod+Shift+l                                        { move-column-right; }
Mod+Home                                           { focus-column-first; }
Mod+End                                            { focus-column-last; }
Mod+Ctrl+Home                                      { move-column-to-first; }
Mod+Ctrl+End                                       { move-column-to-last; }
Mod+Ctrl+h                                         { focus-monitor-left; }
Mod+Ctrl+j                                         { focus-monitor-down; }
Mod+Ctrl+k                                         { focus-monitor-up; }
Mod+Ctrl+l                                         { focus-monitor-right; }
Mod+Shift+Ctrl+h                                   { move-column-to-monitor-left; }
Mod+Shift+Ctrl+j                                   { move-column-to-monitor-down; }
Mod+Shift+Ctrl+k                                   { move-column-to-monitor-up; }
Mod+Shift+Ctrl+l                                   { move-column-to-monitor-right; }
Mod+Page_Down                                      { focus-workspace-down; }
Mod+Page_Up                                        { focus-workspace-up; }
Mod+U                                              { focus-workspace-down; }
Mod+I                                              { focus-workspace-up; }
Mod+Ctrl+Page_Down                                 { move-column-to-workspace-down; }
Mod+Ctrl+Page_Up                                   { move-column-to-workspace-up; }
Mod+Ctrl+U                                         { move-column-to-workspace-down; }
Mod+Ctrl+I                                         { move-column-to-workspace-up; }
Mod+Shift+Page_Down                                { move-workspace-down; }
Mod+Shift+Page_Up                                  { move-workspace-up; }
Mod+Shift+U                                        { move-workspace-down; }
Mod+Shift+I                                        { move-workspace-up; }
Mod+WheelScrollDown cooldown-ms=150                { focus-workspace-down; }
Mod+WheelScrollUp cooldown-ms=150                  { focus-workspace-up; }
Mod+Ctrl+WheelScrollDown cooldown-ms=150           { move-column-to-workspace-down; }
Mod+Ctrl+WheelScrollUp cooldown-ms=150             { move-column-to-workspace-up; }
Mod+Shift+WheelScrollDown                          { focus-column-right; }
Mod+Shift+WheelScrollUp                            { focus-column-left; }
Mod+Ctrl+Shift+WheelScrollDown                     { move-column-right; }
Mod+Ctrl+Shift+WheelScrollUp                       { move-column-left; }
Mod+Tab                                            { focus-workspace-previous; }
Mod+BracketLeft                                    { consume-or-expel-window-left; }
Mod+BracketRight                                   { consume-or-expel-window-right; }
Mod+Comma                                          { consume-window-into-column; }
Mod+Period                                         { expel-window-from-column; }
Mod+R                                              { switch-preset-column-width; }
Mod+Shift+R                                        { switch-preset-window-height; }
Mod+Ctrl+R                                         { reset-window-height; }
Mod+F                                              { maximize-column; }
Mod+Shift+F                                        { fullscreen-window; }
Mod+Ctrl+F                                         { expand-column-to-available-width; }
Mod+C                                              { center-column; }
Mod+Ctrl+C                                         { center-visible-columns; }
Mod+Minus                                          { set-column-width "-10%"; }
Mod+Equal                                          { set-column-width "+10%"; }
Mod+Ctrl+Minus                                     { set-column-width "-1"; }
Mod+Ctrl+Equal                                     { set-column-width "+1"; }
Mod+Shift+Minus                                    { set-window-height "-10%"; }
Mod+Shift+Equal                                    { set-window-height "+10%"; }
Mod+Shift+Ctrl+Minus                               { set-window-height "-1"; }
Mod+Shift+Ctrl+Equal                               { set-window-height "+1"; }
Mod+0                                              { set-column-width "960"; }
Mod+Shift+0                                        { set-window-height "540"; }
Mod+Alt+0                                          { set-column-width "1280"; }
Mod+Shift+Alt+0                                    { set-window-height "720"; }
Mod+Ctrl+0                                         { set-column-width "1920"; }
Mod+Shift+Ctrl+0                                   { set-window-height "1080"; }
Mod+V                                              { toggle-window-floating; }
Mod+Shift+V                                        { switch-focus-between-floating-and-tiling; }
Mod+W                                              { toggle-column-tabbed-display; }
Mod+Space                                          { switch-layout "next"; }
Mod+Shift+Space                                    { switch-layout "prev"; }
Print                                              { screenshot; }
Ctrl+Print                                         { screenshot-screen; }
Alt+Print                                          { screenshot-window; }
Mod+Escape allow-inhibiting=false                  { toggle-keyboard-shortcuts-inhibit; }
Ctrl+Alt+Delete                                    { quit; }
Mod+Shift+Slash                                    { spawn "~/.config/niri/scripts/rofi_bindings"; }
Mod+D                                              { spawn "~/.config/niri/scripts/rofi_launcher"; }
Mod+B                                              { spawn "~/.config/niri/scripts/rofi_bluetooth"; }
Mod+M                                              { spawn "~/.config/niri/scripts/rofi_music"; }
Mod+N                                              { spawn "~/.config/niri/scripts/rofi_network"; }
Mod+Shift+D                                        { spawn "~/.config/niri/scripts/rofi_showwindows"; }
Mod+E                                              { spawn "emacsclient" "-c" "-s" "emacs-prod"; }
Mod+Shift+E                                        { spawn "emacsclient" "-c" "-s" "emacs-dev"; }
Mod+T                                              { spawn "thunar"; }
Mod+Shift+Y                                        { spawn "sh" "-c" "kitty --detach yazi"; }
Mod+Shift+N                                        { spawn "pluma"; }
Mod+1                                              { spawn "~/projects/niri_toolkit/niri-move-window.py" "--match" "Messages" "--target" "m" "--target_id" "HDMI-A-2" "--focus"; }
Mod+Shift+1                                        { spawn "~/projects/niri_toolkit/niri-move-window.py" "--match" "Messages" "--target" "w" "--target_id" "messaging"; }
Mod+2                                              { spawn "~/projects/niri_toolkit/niri-move-window.py" "--match" "mu4e" "--target" "m" "--target_id" "HDMI-A-2" "--focus"; }
Mod+Shift+2                                        { spawn "~/projects/niri_toolkit/niri-move-window.py" "--match" "mu4e" "--target" "w" "--target_id" "messaging"; }
Mod+P                                              { spawn "~/projects/niri_toolkit/niri_scratchpad" "--action" "put" "--scratchpad_name" "scratchpad"; }
Mod+Shift+P                                        { spawn "~/projects/niri_toolkit/niri_scratchpad" "--action" "get" "--scratchpad_name" "scratchpad"; }
Mod+Return                                         { spawn "~/.config/niri/scripts/alacritty"; }
Mod+Alt+L                                          { spawn "~/.config/niri/scripts/lockscreen"; }
XF86AudioRaiseVolume allow-when-locked=true        { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1+"; }
XF86AudioLowerVolume allow-when-locked=true        { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1-"; }
XF86AudioMute allow-when-locked=true               { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }
XF86AudioMicMute allow-when-locked=true            { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SOURCE@" "toggle"; }
Mod+Shift+S                                        { spawn "~/projects/niri_toolkit/niri-screenshot-picker"; }
Mod+Ctrl+S                                         { spawn "~/projects/niri_toolkit/niri-screenshot-picker-emacs"; }
Mod+Shift+T                                        { spawn "~/projects/niri_toolkit/niri-hot-change"; }
Mod+S                                              { screenshot; }
Mod+O repeat=false                                 { toggle-overview; }
Mod+Q                                              { close-window; }
Mod+h                                              { focus-column-left; }
Mod+j                                              { focus-window-down; }
Mod+k                                              { focus-window-up; }
Mod+l                                              { focus-column-right; }
Mod+Shift+h                                        { move-column-left; }
Mod+Shift+j                                        { move-window-down; }
Mod+Shift+k                                        { move-window-up; }
Mod+Shift+l                                        { move-column-right; }
Mod+Home                                           { focus-column-first; }
Mod+End                                            { focus-column-last; }
Mod+Ctrl+Home                                      { move-column-to-first; }
Mod+Ctrl+End                                       { move-column-to-last; }
Mod+Ctrl+h                                         { focus-monitor-left; }
Mod+Ctrl+j                                         { focus-monitor-down; }
Mod+Ctrl+k                                         { focus-monitor-up; }
Mod+Ctrl+l                                         { focus-monitor-right; }
Mod+Shift+Ctrl+h                                   { move-column-to-monitor-left; }
Mod+Shift+Ctrl+j                                   { move-column-to-monitor-down; }
Mod+Shift+Ctrl+k                                   { move-column-to-monitor-up; }
Mod+Shift+Ctrl+l                                   { move-column-to-monitor-right; }
Mod+Page_Down                                      { focus-workspace-down; }
Mod+Page_Up                                        { focus-workspace-up; }
Mod+U                                              { focus-workspace-down; }
Mod+I                                              { focus-workspace-up; }
Mod+Ctrl+Page_Down                                 { move-column-to-workspace-down; }
Mod+Ctrl+Page_Up                                   { move-column-to-workspace-up; }
Mod+Ctrl+U                                         { move-column-to-workspace-down; }
Mod+Ctrl+I                                         { move-column-to-workspace-up; }
Mod+Shift+Page_Down                                { move-workspace-down; }
Mod+Shift+Page_Up                                  { move-workspace-up; }
Mod+Shift+U                                        { move-workspace-down; }
Mod+Shift+I                                        { move-workspace-up; }
Mod+WheelScrollDown cooldown-ms=150                { focus-workspace-down; }
Mod+WheelScrollUp cooldown-ms=150                  { focus-workspace-up; }
Mod+Ctrl+WheelScrollDown cooldown-ms=150           { move-column-to-workspace-down; }
Mod+Ctrl+WheelScrollUp cooldown-ms=150             { move-column-to-workspace-up; }
Mod+Shift+WheelScrollDown                          { focus-column-right; }
Mod+Shift+WheelScrollUp                            { focus-column-left; }
Mod+Ctrl+Shift+WheelScrollDown                     { move-column-right; }
Mod+Ctrl+Shift+WheelScrollUp                       { move-column-left; }
Mod+Tab                                            { focus-workspace-previous; }
Mod+BracketLeft                                    { consume-or-expel-window-left; }
Mod+BracketRight                                   { consume-or-expel-window-right; }
Mod+Comma                                          { consume-window-into-column; }
Mod+Period                                         { expel-window-from-column; }
Mod+R                                              { switch-preset-column-width; }
Mod+Shift+R                                        { switch-preset-window-height; }
Mod+Ctrl+R                                         { reset-window-height; }
Mod+F                                              { maximize-column; }
Mod+Shift+F                                        { fullscreen-window; }
Mod+Ctrl+F                                         { expand-column-to-available-width; }
Mod+C                                              { center-column; }
Mod+Ctrl+C                                         { center-visible-columns; }
Mod+Minus                                          { set-column-width "-10%"; }
Mod+Equal                                          { set-column-width "+10%"; }
Mod+Ctrl+Minus                                     { set-column-width "-1"; }
Mod+Ctrl+Equal                                     { set-column-width "+1"; }
Mod+Shift+Minus                                    { set-window-height "-10%"; }
Mod+Shift+Equal                                    { set-window-height "+10%"; }
Mod+Shift+Ctrl+Minus                               { set-window-height "-1"; }
Mod+Shift+Ctrl+Equal                               { set-window-height "+1"; }
Mod+0                                              { set-column-width "960"; }
Mod+Shift+0                                        { set-window-height "540"; }
Mod+Alt+0                                          { set-column-width "1280"; }
Mod+Shift+Alt+0                                    { set-window-height "720"; }
Mod+Ctrl+0                                         { set-column-width "1920"; }
Mod+Shift+Ctrl+0                                   { set-window-height "1080"; }
Mod+V                                              { toggle-window-floating; }
Mod+Shift+V                                        { switch-focus-between-floating-and-tiling; }
Mod+W                                              { toggle-column-tabbed-display; }
Mod+Space                                          { switch-layout "next"; }
Mod+Shift+Space                                    { switch-layout "prev"; }
Print                                              { screenshot; }
Ctrl+Print                                         { screenshot-screen; }
Alt+Print                                          { screenshot-window; }
Mod+Escape allow-inhibiting=false                  { toggle-keyboard-shortcuts-inhibit; }
Ctrl+Alt+Delete                                    { quit; }
Mod+Shift+Slash                                    { spawn "~/.config/niri/scripts/rofi_bindings"; }
Mod+D                                              { spawn "~/.config/niri/scripts/rofi_launcher"; }
Mod+B                                              { spawn "~/.config/niri/scripts/rofi_bluetooth"; }
Mod+M                                              { spawn "~/.config/niri/scripts/rofi_music"; }
Mod+N                                              { spawn "~/.config/niri/scripts/rofi_network"; }
Mod+Shift+D                                        { spawn "~/.config/niri/scripts/rofi_showwindows"; }
Mod+E                                              { spawn "emacsclient" "-c" "-s" "emacs-prod"; }
Mod+Shift+E                                        { spawn "emacsclient" "-c" "-s" "emacs-dev"; }
Mod+T                                              { spawn "thunar"; }
Mod+Shift+Y                                        { spawn "sh" "-c" "kitty --detach yazi"; }
Mod+Shift+N                                        { spawn "pluma"; }
Mod+1                                              { spawn "~/projects/niri_toolkit/niri-move-window.py" "--match" "Messages" "--target" "m" "--target_id" "HDMI-A-2" "--focus"; }
Mod+Shift+1                                        { spawn "~/projects/niri_toolkit/niri-move-window.py" "--match" "Messages" "--target" "w" "--target_id" "messaging"; }
Mod+2                                              { spawn "~/projects/niri_toolkit/niri-move-window.py" "--match" "mu4e" "--target" "m" "--target_id" "HDMI-A-2" "--focus"; }
Mod+Shift+2                                        { spawn "~/projects/niri_toolkit/niri-move-window.py" "--match" "mu4e" "--target" "w" "--target_id" "messaging"; }
Mod+P                                              { spawn "~/projects/niri_toolkit/niri_scratchpad" "--action" "put" "--scratchpad_name" "scratchpad"; }
Mod+Shift+P                                        { spawn "~/projects/niri_toolkit/niri_scratchpad" "--action" "get" "--scratchpad_name" "scratchpad"; }
Mod+Return                                         { spawn "~/.config/niri/scripts/alacritty"; }
Mod+Alt+L                                          { spawn "~/.config/niri/scripts/lockscreen"; }
XF86AudioRaiseVolume allow-when-locked=true        { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1+"; }
XF86AudioLowerVolume allow-when-locked=true        { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1-"; }
XF86AudioMute allow-when-locked=true               { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }
XF86AudioMicMute allow-when-locked=true            { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SOURCE@" "toggle"; }
Mod+Shift+S                                        { spawn "~/projects/niri_toolkit/niri-screenshot-picker"; }
Mod+Ctrl+S                                         { spawn "~/projects/niri_toolkit/niri-screenshot-picker-emacs"; }
Mod+S                                              { screenshot; }
Mod+O repeat=false                                 { toggle-overview; }
Mod+Q                                              { close-window; }
Mod+h                                              { focus-column-left; }
Mod+j                                              { focus-window-down; }
Mod+k                                              { focus-window-up; }
Mod+l                                              { focus-column-right; }
Mod+Shift+h                                        { move-column-left; }
Mod+Shift+j                                        { move-window-down; }
Mod+Shift+k                                        { move-window-up; }
Mod+Shift+l                                        { move-column-right; }
Mod+Home                                           { focus-column-first; }
Mod+End                                            { focus-column-last; }
Mod+Ctrl+Home                                      { move-column-to-first; }
Mod+Ctrl+End                                       { move-column-to-last; }
Mod+Ctrl+h                                         { focus-monitor-left; }
Mod+Ctrl+j                                         { focus-monitor-down; }
Mod+Ctrl+k                                         { focus-monitor-up; }
Mod+Ctrl+l                                         { focus-monitor-right; }
Mod+Shift+Ctrl+h                                   { move-column-to-monitor-left; }
Mod+Shift+Ctrl+j                                   { move-column-to-monitor-down; }
Mod+Shift+Ctrl+k                                   { move-column-to-monitor-up; }
Mod+Shift+Ctrl+l                                   { move-column-to-monitor-right; }
Mod+Page_Down                                      { focus-workspace-down; }
Mod+Page_Up                                        { focus-workspace-up; }
Mod+U                                              { focus-workspace-down; }
Mod+I                                              { focus-workspace-up; }
Mod+Ctrl+Page_Down                                 { move-column-to-workspace-down; }
Mod+Ctrl+Page_Up                                   { move-column-to-workspace-up; }
Mod+Ctrl+U                                         { move-column-to-workspace-down; }
Mod+Ctrl+I                                         { move-column-to-workspace-up; }
Mod+Shift+Page_Down                                { move-workspace-down; }
Mod+Shift+Page_Up                                  { move-workspace-up; }
Mod+Shift+U                                        { move-workspace-down; }
Mod+Shift+I                                        { move-workspace-up; }
Mod+WheelScrollDown cooldown-ms=150                { focus-workspace-down; }
Mod+WheelScrollUp cooldown-ms=150                  { focus-workspace-up; }
Mod+Ctrl+WheelScrollDown cooldown-ms=150           { move-column-to-workspace-down; }
Mod+Ctrl+WheelScrollUp cooldown-ms=150             { move-column-to-workspace-up; }
Mod+Shift+WheelScrollDown                          { focus-column-right; }
Mod+Shift+WheelScrollUp                            { focus-column-left; }
Mod+Ctrl+Shift+WheelScrollDown                     { move-column-right; }
Mod+Ctrl+Shift+WheelScrollUp                       { move-column-left; }
Mod+Tab                                            { focus-workspace-previous; }
Mod+BracketLeft                                    { consume-or-expel-window-left; }
Mod+BracketRight                                   { consume-or-expel-window-right; }
Mod+Comma                                          { consume-window-into-column; }
Mod+Period                                         { expel-window-from-column; }
Mod+R                                              { switch-preset-column-width; }
Mod+Shift+R                                        { switch-preset-window-height; }
Mod+Ctrl+R                                         { reset-window-height; }
Mod+F                                              { maximize-column; }
Mod+Shift+F                                        { fullscreen-window; }
Mod+Ctrl+F                                         { expand-column-to-available-width; }
Mod+C                                              { center-column; }
Mod+Ctrl+C                                         { center-visible-columns; }
Mod+Minus                                          { set-column-width "-10%"; }
Mod+Equal                                          { set-column-width "+10%"; }
Mod+Ctrl+Minus                                     { set-column-width "-1"; }
Mod+Ctrl+Equal                                     { set-column-width "+1"; }
Mod+Shift+Minus                                    { set-window-height "-10%"; }
Mod+Shift+Equal                                    { set-window-height "+10%"; }
Mod+Shift+Ctrl+Minus                               { set-window-height "-1"; }
Mod+Shift+Ctrl+Equal                               { set-window-height "+1"; }
Mod+0                                              { set-column-width "960"; }
Mod+Shift+0                                        { set-window-height "540"; }
Mod+Alt+0                                          { set-column-width "1280"; }
Mod+Shift+Alt+0                                    { set-window-height "720"; }
Mod+Ctrl+0                                         { set-column-width "1920"; }
Mod+Shift+Ctrl+0                                   { set-window-height "1080"; }
Mod+V                                              { toggle-window-floating; }
Mod+Shift+V                                        { switch-focus-between-floating-and-tiling; }
Mod+W                                              { toggle-column-tabbed-display; }
Mod+Space                                          { switch-layout "next"; }
Mod+Shift+Space                                    { switch-layout "prev"; }
Print                                              { screenshot; }
Ctrl+Print                                         { screenshot-screen; }
Alt+Print                                          { screenshot-window; }
Mod+Escape allow-inhibiting=false                  { toggle-keyboard-shortcuts-inhibit; }
Ctrl+Alt+Delete                                    { quit; }
Mod+Shift+Slash                                    { spawn "~/.config/niri/scripts/rofi_bindings"; }
Mod+D                                              { spawn "~/.config/niri/scripts/rofi_launcher"; }
Mod+B                                              { spawn "~/.config/niri/scripts/rofi_bluetooth"; }
Mod+M                                              { spawn "~/.config/niri/scripts/rofi_music"; }
Mod+N                                              { spawn "~/.config/niri/scripts/rofi_network"; }
Mod+Shift+D                                        { spawn "~/.config/niri/scripts/rofi_showwindows"; }
Mod+E                                              { spawn "emacsclient" "-c" "-s" "emacs-prod"; }
Mod+Shift+E                                        { spawn "emacsclient" "-c" "-s" "emacs-dev"; }
Mod+T                                              { spawn "thunar"; }
Mod+Shift+Y                                        { spawn "sh" "-c" "kitty --detach yazi"; }
Mod+Shift+N                                        { spawn "pluma"; }
Mod+1                                              { spawn "~/projects/niri_toolkit/niri-move-window.py" "--match" "Messages" "--target" "m" "--target_id" "HDMI-A-2" "--focus"; }
Mod+Shift+1                                        { spawn "~/projects/niri_toolkit/niri-move-window.py" "--match" "Messages" "--target" "w" "--target_id" "messaging"; }
Mod+2                                              { spawn "~/projects/niri_toolkit/niri-move-window.py" "--match" "mu4e" "--target" "m" "--target_id" "HDMI-A-2" "--focus"; }
Mod+Shift+2                                        { spawn "~/projects/niri_toolkit/niri-move-window.py" "--match" "mu4e" "--target" "w" "--target_id" "messaging"; }
Mod+P                                              { spawn "~/projects/niri_toolkit/niri_scratchpad" "--action" "put" "--scratchpad_name" "scratchpad"; }
Mod+Shift+P                                        { spawn "~/projects/niri_toolkit/niri_scratchpad" "--action" "get" "--scratchpad_name" "scratchpad"; }
Mod+Return                                         { spawn "~/.config/niri/scripts/alacritty"; }
Mod+Alt+L                                          { spawn "~/.config/niri/scripts/lockscreen"; }
XF86AudioRaiseVolume allow-when-locked=true        { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1+"; }
XF86AudioLowerVolume allow-when-locked=true        { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1-"; }
XF86AudioMute allow-when-locked=true               { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }
XF86AudioMicMute allow-when-locked=true            { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SOURCE@" "toggle"; }
Mod+Shift+S                                        { spawn "~/projects/niri_toolkit/niri-screenshot-picker"; }
Mod+Ctrl+S                                         { spawn "~/projects/niri_toolkit/niri-screenshot-picker-emacs"; }
Mod+S                                              { screenshot; }
Mod+O repeat=false                                 { toggle-overview; }
Mod+Q                                              { close-window; }
Mod+h                                              { focus-column-left; }
Mod+j                                              { focus-window-down; }
Mod+k                                              { focus-window-up; }
Mod+l                                              { focus-column-right; }
Mod+Shift+h                                        { move-column-left; }
Mod+Shift+j                                        { move-window-down; }
Mod+Shift+k                                        { move-window-up; }
Mod+Shift+l                                        { move-column-right; }
Mod+Home                                           { focus-column-first; }
Mod+End                                            { focus-column-last; }
Mod+Ctrl+Home                                      { move-column-to-first; }
Mod+Ctrl+End                                       { move-column-to-last; }
Mod+Ctrl+h                                         { focus-monitor-left; }
Mod+Ctrl+j                                         { focus-monitor-down; }
Mod+Ctrl+k                                         { focus-monitor-up; }
Mod+Ctrl+l                                         { focus-monitor-right; }
Mod+Shift+Ctrl+h                                   { move-column-to-monitor-left; }
Mod+Shift+Ctrl+j                                   { move-column-to-monitor-down; }
Mod+Shift+Ctrl+k                                   { move-column-to-monitor-up; }
Mod+Shift+Ctrl+l                                   { move-column-to-monitor-right; }
Mod+Page_Down                                      { focus-workspace-down; }
Mod+Page_Up                                        { focus-workspace-up; }
Mod+U                                              { focus-workspace-down; }
Mod+I                                              { focus-workspace-up; }
Mod+Ctrl+Page_Down                                 { move-column-to-workspace-down; }
Mod+Ctrl+Page_Up                                   { move-column-to-workspace-up; }
Mod+Ctrl+U                                         { move-column-to-workspace-down; }
Mod+Ctrl+I                                         { move-column-to-workspace-up; }
Mod+Shift+Page_Down                                { move-workspace-down; }
Mod+Shift+Page_Up                                  { move-workspace-up; }
Mod+Shift+U                                        { move-workspace-down; }
Mod+Shift+I                                        { move-workspace-up; }
Mod+WheelScrollDown cooldown-ms=150                { focus-workspace-down; }
Mod+WheelScrollUp cooldown-ms=150                  { focus-workspace-up; }
Mod+Ctrl+WheelScrollDown cooldown-ms=150           { move-column-to-workspace-down; }
Mod+Ctrl+WheelScrollUp cooldown-ms=150             { move-column-to-workspace-up; }
Mod+Shift+WheelScrollDown                          { focus-column-right; }
Mod+Shift+WheelScrollUp                            { focus-column-left; }
Mod+Ctrl+Shift+WheelScrollDown                     { move-column-right; }
Mod+Ctrl+Shift+WheelScrollUp                       { move-column-left; }
Mod+Tab                                            { focus-workspace-previous; }
Mod+BracketLeft                                    { consume-or-expel-window-left; }
Mod+BracketRight                                   { consume-or-expel-window-right; }
Mod+Comma                                          { consume-window-into-column; }
Mod+Period                                         { expel-window-from-column; }
Mod+R                                              { switch-preset-column-width; }
Mod+Shift+R                                        { switch-preset-window-height; }
Mod+Ctrl+R                                         { reset-window-height; }
Mod+F                                              { maximize-column; }
Mod+Shift+F                                        { fullscreen-window; }
Mod+Ctrl+F                                         { expand-column-to-available-width; }
Mod+C                                              { center-column; }
Mod+Ctrl+C                                         { center-visible-columns; }
Mod+Minus                                          { set-column-width "-10%"; }
Mod+Equal                                          { set-column-width "+10%"; }
Mod+Ctrl+Minus                                     { set-column-width "-1"; }
Mod+Ctrl+Equal                                     { set-column-width "+1"; }
Mod+Shift+Minus                                    { set-window-height "-10%"; }
Mod+Shift+Equal                                    { set-window-height "+10%"; }
Mod+Shift+Ctrl+Minus                               { set-window-height "-1"; }
Mod+Shift+Ctrl+Equal                               { set-window-height "+1"; }
Mod+0                                              { set-column-width "960"; }
Mod+Shift+0                                        { set-window-height "540"; }
Mod+Alt+0                                          { set-column-width "1280"; }
Mod+Shift+Alt+0                                    { set-window-height "720"; }
Mod+Ctrl+0                                         { set-column-width "1920"; }
Mod+Shift+Ctrl+0                                   { set-window-height "1080"; }
Mod+V                                              { toggle-window-floating; }
Mod+Shift+V                                        { switch-focus-between-floating-and-tiling; }
Mod+W                                              { toggle-column-tabbed-display; }
Mod+Space                                          { switch-layout "next"; }
Mod+Shift+Space                                    { switch-layout "prev"; }
Print                                              { screenshot; }
Ctrl+Print                                         { screenshot-screen; }
Alt+Print                                          { screenshot-window; }
Mod+Escape allow-inhibiting=false                  { toggle-keyboard-shortcuts-inhibit; }
Ctrl+Alt+Delete                                    { quit; }
Mod+Shift+Slash                                    { spawn "~/.config/niri/scripts/rofi_bindings"; }
Mod+D                                              { spawn "~/.config/niri/scripts/rofi_launcher"; }
Mod+B                                              { spawn "~/.config/niri/scripts/rofi_bluetooth"; }
Mod+M                                              { spawn "~/.config/niri/scripts/rofi_music"; }
Mod+N                                              { spawn "~/.config/niri/scripts/rofi_network"; }
Mod+Shift+D                                        { spawn "~/.config/niri/scripts/rofi_showwindows"; }
Mod+E                                              { spawn "emacsclient" "-c" "-s" "emacs-prod"; }
Mod+Shift+E                                        { spawn "emacsclient" "-c" "-s" "emacs-dev"; }
Mod+T                                              { spawn "thunar"; }
Mod+Shift+Y                                        { spawn "sh" "-c" "kitty --detach yazi"; }
Mod+Shift+N                                        { spawn "pluma"; }
Mod+1                                              { spawn "~/projects/niri_toolkit/niri-move-window.py" "--match" "Messages" "--target" "m" "--target_id" "HDMI-A-2" "--focus"; }
Mod+Shift+1                                        { spawn "~/projects/niri_toolkit/niri-move-window.py" "--match" "Messages" "--target" "w" "--target_id" "messaging"; }
Mod+2                                              { spawn "~/projects/niri_toolkit/niri-move-window.py" "--match" "mu4e" "--target" "m" "--target_id" "HDMI-A-2" "--focus"; }
Mod+Shift+2                                        { spawn "~/projects/niri_toolkit/niri-move-window.py" "--match" "mu4e" "--target" "w" "--target_id" "messaging"; }
Mod+P                                              { spawn "~/projects/niri_toolkit/niri_scratchpad" "--action" "put" "--scratchpad_name" "scratchpad"; }
Mod+Shift+P                                        { spawn "~/projects/niri_toolkit/niri_scratchpad" "--action" "get" "--scratchpad_name" "scratchpad"; }
Mod+Return                                         { spawn "~/.config/niri/scripts/alacritty"; }
Mod+Alt+L                                          { spawn "~/.config/niri/scripts/lockscreen"; }
XF86AudioRaiseVolume allow-when-locked=true        { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1+"; }
XF86AudioLowerVolume allow-when-locked=true        { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1-"; }
XF86AudioMute allow-when-locked=true               { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }
XF86AudioMicMute allow-when-locked=true            { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SOURCE@" "toggle"; }
Mod+Shift+S                                        { spawn "~/projects/niri_toolkit/niri-screenshot-picker"; }
Mod+Ctrl+S                                         { spawn "~/projects/niri_toolkit/niri-screenshot-picker-emacs"; }
Mod+S                                              { screenshot; }
Mod+O repeat=false                                 { toggle-overview; }
Mod+Q                                              { close-window; }
Mod+h                                              { focus-column-left; }
Mod+j                                              { focus-window-down; }
Mod+k                                              { focus-window-up; }
Mod+l                                              { focus-column-right; }
Mod+Shift+h                                        { move-column-left; }
Mod+Shift+j                                        { move-window-down; }
Mod+Shift+k                                        { move-window-up; }
Mod+Shift+l                                        { move-column-right; }
Mod+Home                                           { focus-column-first; }
Mod+End                                            { focus-column-last; }
Mod+Ctrl+Home                                      { move-column-to-first; }
Mod+Ctrl+End                                       { move-column-to-last; }
Mod+Ctrl+h                                         { focus-monitor-left; }
Mod+Ctrl+j                                         { focus-monitor-down; }
Mod+Ctrl+k                                         { focus-monitor-up; }
Mod+Ctrl+l                                         { focus-monitor-right; }
Mod+Shift+Ctrl+h                                   { move-column-to-monitor-left; }
Mod+Shift+Ctrl+j                                   { move-column-to-monitor-down; }
Mod+Shift+Ctrl+k                                   { move-column-to-monitor-up; }
Mod+Shift+Ctrl+l                                   { move-column-to-monitor-right; }
Mod+Page_Down                                      { focus-workspace-down; }
Mod+Page_Up                                        { focus-workspace-up; }
Mod+U                                              { focus-workspace-down; }
Mod+I                                              { focus-workspace-up; }
Mod+Ctrl+Page_Down                                 { move-column-to-workspace-down; }
Mod+Ctrl+Page_Up                                   { move-column-to-workspace-up; }
Mod+Ctrl+U                                         { move-column-to-workspace-down; }
Mod+Ctrl+I                                         { move-column-to-workspace-up; }
Mod+Shift+Page_Down                                { move-workspace-down; }
Mod+Shift+Page_Up                                  { move-workspace-up; }
Mod+Shift+U                                        { move-workspace-down; }
Mod+Shift+I                                        { move-workspace-up; }
Mod+WheelScrollDown cooldown-ms=150                { focus-workspace-down; }
Mod+WheelScrollUp cooldown-ms=150                  { focus-workspace-up; }
Mod+Ctrl+WheelScrollDown cooldown-ms=150           { move-column-to-workspace-down; }
Mod+Ctrl+WheelScrollUp cooldown-ms=150             { move-column-to-workspace-up; }
Mod+Shift+WheelScrollDown                          { focus-column-right; }
Mod+Shift+WheelScrollUp                            { focus-column-left; }
Mod+Ctrl+Shift+WheelScrollDown                     { move-column-right; }
Mod+Ctrl+Shift+WheelScrollUp                       { move-column-left; }
Mod+Tab                                            { focus-workspace-previous; }
Mod+BracketLeft                                    { consume-or-expel-window-left; }
Mod+BracketRight                                   { consume-or-expel-window-right; }
Mod+Comma                                          { consume-window-into-column; }
Mod+Period                                         { expel-window-from-column; }
Mod+R                                              { switch-preset-column-width; }
Mod+Shift+R                                        { switch-preset-window-height; }
Mod+Ctrl+R                                         { reset-window-height; }
Mod+F                                              { maximize-column; }
Mod+Shift+F                                        { fullscreen-window; }
Mod+Ctrl+F                                         { expand-column-to-available-width; }
Mod+C                                              { center-column; }
Mod+Ctrl+C                                         { center-visible-columns; }
Mod+Minus                                          { set-column-width "-10%"; }
Mod+Equal                                          { set-column-width "+10%"; }
Mod+Ctrl+Minus                                     { set-column-width "-1"; }
Mod+Ctrl+Equal                                     { set-column-width "+1"; }
Mod+Shift+Minus                                    { set-window-height "-10%"; }
Mod+Shift+Equal                                    { set-window-height "+10%"; }
Mod+Shift+Ctrl+Minus                               { set-window-height "-1"; }
Mod+Shift+Ctrl+Equal                               { set-window-height "+1"; }
Mod+0                                              { set-column-width "960"; }
Mod+Shift+0                                        { set-window-height "540"; }
Mod+Alt+0                                          { set-column-width "1280"; }
Mod+Shift+Alt+0                                    { set-window-height "720"; }
Mod+Ctrl+0                                         { set-column-width "1920"; }
Mod+Shift+Ctrl+0                                   { set-window-height "1080"; }
Mod+V                                              { toggle-window-floating; }
Mod+Shift+V                                        { switch-focus-between-floating-and-tiling; }
Mod+W                                              { toggle-column-tabbed-display; }
Mod+Space                                          { switch-layout "next"; }
Mod+Shift+Space                                    { switch-layout "prev"; }
Print                                              { screenshot; }
Ctrl+Print                                         { screenshot-screen; }
Alt+Print                                          { screenshot-window; }
Mod+Escape allow-inhibiting=false                  { toggle-keyboard-shortcuts-inhibit; }
Ctrl+Alt+Delete                                    { quit; }

This generates the keybindings and outputs them to the config.kdl file.
#+BEGIN_SRC kdl :noweb yes :tangle ./config.kdl
  // ## BINDINGS ################################################################      
   binds {
      <<keybindings-config(data=keybindings-data, ts=target-system, mode="config")>>          
   }
#+END_SRC

This generates the keybindings documentation and writes it to a text file that is
referenced by a custom overlay displayed using a keybinding + rofi.
#+BEGIN_SRC kdl :noweb yes :tangle ./key_bindings.txt
  <<keybindings-config(data=keybindings-data, ts="", mode="doc")>>
#+END_SRC
